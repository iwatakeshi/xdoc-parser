"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs");
const chai = require("chai");
const XDocParser_1 = require("../src/XDocParser");
const XDocASTNode_1 = require("../src/XDocASTNode");
/* Helpers */
const equal = chai.assert.deepEqual;
const source = FS.readFileSync(`${process.cwd()}/test/markdown.comment.txt`, 'utf-8');
const xdoc = (source) => (new XDocParser_1.default(source).parse());
const getCode = () => xdoc(source).map(ast => {
    let code = ast.children.filter(node => node.type === 'code')[0];
    return code;
})[0];
const documentation = (annotations) => XDocASTNode_1.createDocumentationNode(XDocASTNode_1.createBodyNode(annotations));
describe('XDoc Parser', () => {
    describe('parse markdown', () => {
        describe('parse xdoc code block', () => {
            it('shoud add an "xdoc" property to remark\'s markdown AST', () => {
                let code = getCode();
                chai.assert.exists(code['xdoc']);
            });
            it('should parse @tag id', () => equal(getCode()['xdoc'], documentation([
                XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, null)
            ])));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGRvYy5jb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC94ZG9jLmNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGtEQUEyQztBQUMzQyxvREFBMEw7QUFFMUwsYUFBYTtBQUNiLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RGLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksb0JBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDM0MsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLFdBQXNCLEVBQThCLEVBQUUsQ0FBQyxxQ0FBdUIsQ0FDbkcsNEJBQWMsQ0FDWixXQUFXLENBQ1osQ0FDRixDQUFBO0FBR0QsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7Z0JBQ2hFLElBQUksSUFBSSxHQUFHLE9BQU8sRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQ3BDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUNqQixhQUFhLENBQUM7Z0JBQ1osMkJBQWEsQ0FDWCwrQkFBaUIsQ0FDZixrQ0FBb0IsQ0FBQyxLQUFLLENBQUMsQ0FDNUIsRUFDRCxxQ0FBdUIsQ0FDckIsa0NBQW9CLENBQUMsSUFBSSxDQUFDLENBQzNCLEVBQ0QsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLENBQ0w7YUFBQyxDQUFDLENBQ04sQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IFhEb2NQYXJzZXIgZnJvbSAnLi4vc3JjL1hEb2NQYXJzZXInO1xuaW1wb3J0IHsgVGFnTm9kZSwgRG9jdW1lbnRhdGlvbk5vZGUsIGNyZWF0ZURvY3VtZW50YXRpb25Ob2RlLCBjcmVhdGVCb2R5Tm9kZSwgY3JlYXRlVGFnTmFtZU5vZGUsIGNyZWF0ZUlkZW50aWZpZXJOb2RlLCBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZSwgY3JlYXRlVGFnTm9kZSB9IGZyb20gXCIuLi9zcmMvWERvY0FTVE5vZGVcIjtcblxuLyogSGVscGVycyAqL1xuY29uc3QgZXF1YWwgPSBjaGFpLmFzc2VydC5kZWVwRXF1YWw7XG5jb25zdCBzb3VyY2UgPSBGUy5yZWFkRmlsZVN5bmMoYCR7cHJvY2Vzcy5jd2QoKX0vdGVzdC9tYXJrZG93bi5jb21tZW50LnR4dGAsICd1dGYtOCcpO1xuY29uc3QgeGRvYyA9IChzb3VyY2U6IHN0cmluZykgPT4gKG5ldyBYRG9jUGFyc2VyKHNvdXJjZSkucGFyc2UoKSk7XG5jb25zdCBnZXRDb2RlID0gKCkgPT4geGRvYyhzb3VyY2UpLm1hcChhc3QgPT4ge1xuICBsZXQgY29kZSA9IGFzdC5jaGlsZHJlbi5maWx0ZXIobm9kZSA9PiBub2RlLnR5cGUgPT09ICdjb2RlJylbMF07XG4gIHJldHVybiBjb2RlO1xufSlbMF07XG5cbmNvbnN0IGRvY3VtZW50YXRpb24gPSAoYW5ub3RhdGlvbnM6IFRhZ05vZGVbXSk6IFBhcnRpYWw8RG9jdW1lbnRhdGlvbk5vZGU+ID0+IGNyZWF0ZURvY3VtZW50YXRpb25Ob2RlKFxuICBjcmVhdGVCb2R5Tm9kZShcbiAgICBhbm5vdGF0aW9uc1xuICApXG4pXG5cblxuZGVzY3JpYmUoJ1hEb2MgUGFyc2VyJywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFyc2UgbWFya2Rvd24nLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ3BhcnNlIHhkb2MgY29kZSBibG9jaycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91ZCBhZGQgYW4gXCJ4ZG9jXCIgcHJvcGVydHkgdG8gcmVtYXJrXFwncyBtYXJrZG93biBBU1QnLCAoKSA9PiB7XG4gICAgICAgIGxldCBjb2RlID0gZ2V0Q29kZSgpO1xuICAgICAgICBjaGFpLmFzc2VydC5leGlzdHMoY29kZVsneGRvYyddKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHBhcnNlIEB0YWcgaWQnLCAoKSA9PiBlcXVhbChcbiAgICAgICAgZ2V0Q29kZSgpWyd4ZG9jJ10sXG4gICAgICAgIGRvY3VtZW50YXRpb24oW1xuICAgICAgICAgIGNyZWF0ZVRhZ05vZGUoXG4gICAgICAgICAgICBjcmVhdGVUYWdOYW1lTm9kZShcbiAgICAgICAgICAgICAgY3JlYXRlSWRlbnRpZmllck5vZGUoJ3RhZycpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY3JlYXRlVGFnSWRlbnRpZmllck5vZGUoXG4gICAgICAgICAgICAgIGNyZWF0ZUlkZW50aWZpZXJOb2RlKCdpZCcpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICldKVxuICAgICAgKSk7XG4gICAgfSk7XG4gIH0pXG59KTsiXX0=