"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs");
const chai = require("chai");
const __1 = require("../");
const XDocASTNode_1 = require("../src/XDocASTNode");
/* Helpers */
const equal = chai.assert.deepEqual;
const md1 = FS.readFileSync(`${process.cwd()}/test/markdown.comment.txt`, 'utf-8');
const md2 = FS.readFileSync(`${process.cwd()}/test/markdown2.comment.txt`, 'utf-8');
const documentation = (annotations) => XDocASTNode_1.createDocumentationNode(XDocASTNode_1.createBodyNode(annotations));
describe('XDoc Parser', () => {
    describe('parse markdown', () => {
        describe('parse xdoc within markdown (XDoc style)', () => {
            it('should parse @tag id', () => equal(__1.default(md1).parse().documentation, documentation([
                XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, null)
            ])));
        });
        describe('parse xdoc within markdown (JSDoc style)', () => {
            it('should parse @tag id', () => equal(__1.default(md2).parse().documentation, documentation([
                XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, null)
            ])));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGRvYy5jb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC94ZG9jLmNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDJCQUF1QjtBQUN2QixvREFBMEw7QUFFMUwsYUFBYTtBQUNiLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3BDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25GLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLDZCQUE2QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXBGLE1BQU0sYUFBYSxHQUFHLENBQUMsV0FBc0IsRUFBOEIsRUFBRSxDQUFDLHFDQUF1QixDQUNuRyw0QkFBYyxDQUNaLFdBQVcsQ0FDWixDQUNGLENBQUE7QUFHRCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLFFBQVEsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7WUFFdkQsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FDcEMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLGFBQWEsRUFDL0IsYUFBYSxDQUFDO2dCQUNaLDJCQUFhLENBQ1gsK0JBQWlCLENBQ2Ysa0NBQW9CLENBQUMsS0FBSyxDQUFDLENBQzVCLEVBQ0QscUNBQXVCLENBQ3JCLGtDQUFvQixDQUFDLElBQUksQ0FBQyxDQUMzQixFQUNELElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxDQUNMO2FBQUMsQ0FBQyxDQUNOLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtZQUV4RCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUNwQyxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUMvQixhQUFhLENBQUM7Z0JBQ1osMkJBQWEsQ0FDWCwrQkFBaUIsQ0FDZixrQ0FBb0IsQ0FBQyxLQUFLLENBQUMsQ0FDNUIsRUFDRCxxQ0FBdUIsQ0FDckIsa0NBQW9CLENBQUMsSUFBSSxDQUFDLENBQzNCLEVBQ0QsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLENBQ0w7YUFBQyxDQUFDLENBQ04sQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSAnY2hhaSc7XHJcbmltcG9ydCB4ZG9jIGZyb20gJy4uLyc7XHJcbmltcG9ydCB7IFRhZ05vZGUsIERvY3VtZW50YXRpb25Ob2RlLCBjcmVhdGVEb2N1bWVudGF0aW9uTm9kZSwgY3JlYXRlQm9keU5vZGUsIGNyZWF0ZVRhZ05hbWVOb2RlLCBjcmVhdGVJZGVudGlmaWVyTm9kZSwgY3JlYXRlVGFnSWRlbnRpZmllck5vZGUsIGNyZWF0ZVRhZ05vZGUgfSBmcm9tIFwiLi4vc3JjL1hEb2NBU1ROb2RlXCI7XHJcblxyXG4vKiBIZWxwZXJzICovXHJcbmNvbnN0IGVxdWFsID0gY2hhaS5hc3NlcnQuZGVlcEVxdWFsO1xyXG5jb25zdCBtZDEgPSBGUy5yZWFkRmlsZVN5bmMoYCR7cHJvY2Vzcy5jd2QoKX0vdGVzdC9tYXJrZG93bi5jb21tZW50LnR4dGAsICd1dGYtOCcpO1xyXG5jb25zdCBtZDIgPSBGUy5yZWFkRmlsZVN5bmMoYCR7cHJvY2Vzcy5jd2QoKX0vdGVzdC9tYXJrZG93bjIuY29tbWVudC50eHRgLCAndXRmLTgnKTtcclxuXHJcbmNvbnN0IGRvY3VtZW50YXRpb24gPSAoYW5ub3RhdGlvbnM6IFRhZ05vZGVbXSk6IFBhcnRpYWw8RG9jdW1lbnRhdGlvbk5vZGU+ID0+IGNyZWF0ZURvY3VtZW50YXRpb25Ob2RlKFxyXG4gIGNyZWF0ZUJvZHlOb2RlKFxyXG4gICAgYW5ub3RhdGlvbnNcclxuICApXHJcbilcclxuXHJcblxyXG5kZXNjcmliZSgnWERvYyBQYXJzZXInLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ3BhcnNlIG1hcmtkb3duJywgKCkgPT4ge1xyXG4gICAgZGVzY3JpYmUoJ3BhcnNlIHhkb2Mgd2l0aGluIG1hcmtkb3duIChYRG9jIHN0eWxlKScsICgpID0+IHtcclxuXHJcbiAgICAgIGl0KCdzaG91bGQgcGFyc2UgQHRhZyBpZCcsICgpID0+IGVxdWFsKFxyXG4gICAgICAgIHhkb2MobWQxKS5wYXJzZSgpLmRvY3VtZW50YXRpb24sXHJcbiAgICAgICAgZG9jdW1lbnRhdGlvbihbXHJcbiAgICAgICAgICBjcmVhdGVUYWdOb2RlKFxyXG4gICAgICAgICAgICBjcmVhdGVUYWdOYW1lTm9kZShcclxuICAgICAgICAgICAgICBjcmVhdGVJZGVudGlmaWVyTm9kZSgndGFnJylcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgY3JlYXRlVGFnSWRlbnRpZmllck5vZGUoXHJcbiAgICAgICAgICAgICAgY3JlYXRlSWRlbnRpZmllck5vZGUoJ2lkJyksXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIG51bGxcclxuICAgICAgICAgICldKVxyXG4gICAgICApKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdwYXJzZSB4ZG9jIHdpdGhpbiBtYXJrZG93biAoSlNEb2Mgc3R5bGUpJywgKCkgPT4ge1xyXG5cclxuICAgICAgaXQoJ3Nob3VsZCBwYXJzZSBAdGFnIGlkJywgKCkgPT4gZXF1YWwoXHJcbiAgICAgICAgeGRvYyhtZDIpLnBhcnNlKCkuZG9jdW1lbnRhdGlvbixcclxuICAgICAgICBkb2N1bWVudGF0aW9uKFtcclxuICAgICAgICAgIGNyZWF0ZVRhZ05vZGUoXHJcbiAgICAgICAgICAgIGNyZWF0ZVRhZ05hbWVOb2RlKFxyXG4gICAgICAgICAgICAgIGNyZWF0ZUlkZW50aWZpZXJOb2RlKCd0YWcnKVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZShcclxuICAgICAgICAgICAgICBjcmVhdGVJZGVudGlmaWVyTm9kZSgnaWQnKSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgbnVsbFxyXG4gICAgICAgICAgKV0pXHJcbiAgICAgICkpO1xyXG4gICAgfSk7XHJcbiAgfSlcclxufSk7Il19