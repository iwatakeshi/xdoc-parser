"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const XDocASTVisitor_1 = require("../src/XDocASTVisitor");
const XDocASTGenerator_1 = require("../src/XDocASTGenerator");
const XDocASTNode_1 = require("../src/XDocASTNode");
const FS = require("fs");
/* Helpers */
const equal = chai.assert.deepEqual;
const generate = (source) => new XDocASTGenerator_1.default(source).generate();
const parse = (source) => new XDocASTVisitor_1.default(generate(source)).visit();
const documentation = (annotations) => XDocASTNode_1.createDocumentationNode(XDocASTNode_1.createBodyNode(annotations));
// console.log(JSON.stringify(parse(`@tag id: (type & type) | type - Description`), null, 2));
describe('XDoc Syntax Parser (Tom)', () => {
    describe('parse simple annotations', () => {
        it('should parse @tag', () => equal(parse('@tag'), documentation([
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), null, null, null, null)
        ])));
        it('should parse @tag - description', () => equal(parse('@tag - description'), documentation([
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), null, null, null, XDocASTNode_1.createDescriptionNode('description', []))
        ])));
        it('should parse @tag id', () => equal(parse('@tag id'), documentation([
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, null)
        ])));
        it('should parse @tag id - description', () => equal(parse('@tag id - description'), documentation([
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, XDocASTNode_1.createDescriptionNode('description'))
        ])));
    });
    describe('parse complex annotations (the ones JSDoc can\'t do)', () => {
        describe('parse typed annotations', () => {
            /*
             * ====================
             * Parse primary type
             * ====================
             */
            describe('parse primary type', () => {
                it('should parse @tag id: type', () => equal(parse('@tag id: type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null, null)
                ])));
                it('should parse @tag id: type - description', () => equal(parse('@tag id: type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id?: type', () => equal(parse('@tag id?: type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id', true)), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null, null)
                ])));
                it('should parse @tag id?: type - description', () => equal(parse('@tag id?: type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id', true)), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: type.type.type', () => equal(parse('@tag id: type.type.type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createPropertyIdentifierNode([
                        XDocASTNode_1.createIdentifierNode('type'),
                        XDocASTNode_1.createIdentifierNode('type'),
                        XDocASTNode_1.createIdentifierNode('type')
                    ], 'type.type.type'))), null, null)
                ])));
                it('should parse @tag id: type.type.type - description', () => equal(parse('@tag id: type.type.type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createPropertyIdentifierNode([
                        XDocASTNode_1.createIdentifierNode('type'),
                        XDocASTNode_1.createIdentifierNode('type'),
                        XDocASTNode_1.createIdentifierNode('type')
                    ], 'type.type.type'))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            });
            /*
             * ====================
             * Parse union type
             * ====================
             */
            describe('parse union type', () => {
                it('should parse @tag id: type & type', () => equal(parse('@tag id: type & type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: type & type - description', () => equal(parse('@tag id: type & type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            });
            /*
             * ====================
             * Parse intersection type
             * ====================
             */
            describe('parse intersection type', () => {
                it('should parse @tag id: type | type', () => equal(parse('@tag id: type | type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: type | type - description', () => equal(parse('@tag id: type | type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            });
            /*
             * ====================
             * Parse lambda type
             * ====================
             */
            describe('parse lambda type', () => {
                it('should parse @tag id: () => type', () => equal(parse('@tag id: () => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: () => type - description', () => equal(parse('@tag id: () => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: () => type[]', () => equal(parse('@tag id: () => type[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)))), null, null)
                ])));
                it('should parse @tag id: () => type[] - description', () => equal(parse('@tag id: () => type[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (id) => type', () => equal(parse('@tag id: (id) => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: (id) => type - description', () => equal(parse('@tag id: (id) => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (id, id) => type', () => equal(parse('@tag id: (id, id) => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: (id, id) => type - description', () => equal(parse('@tag id: (id, id) => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (id, id) => type', () => equal(parse('@tag id: (id, id) => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: (id: type, id: type) => type - description', () => equal(parse('@tag id: (id: type, id: type) => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (id: type, id: type) => type', () => equal(parse('@tag id: (id: type, id: type) => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: (id, id) => type - description', () => equal(parse('@tag id: (id, id) => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null),
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'), null)
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End parse lambda type
            /*
             * ====================
             * Parse tuple type
             * ====================
             */
            describe('parse tuple type', () => {
                it('should parse @tag id: type<type>', () => equal(parse('@tag id: type<type>'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(XDocASTNode_1.createIdentifierNode('type'), [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, null)
                ])));
                it('should parse @tag id: type<type> - description', () => equal(parse('@tag id: type<type> - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(XDocASTNode_1.createIdentifierNode('type'), [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: type<type, type>', () => equal(parse('@tag id: type<type, type>'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(XDocASTNode_1.createIdentifierNode('type'), [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, null)
                ])));
                it('should parse @tag id: type<type, type> - description', () => equal(parse('@tag id: type<type, type> - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(XDocASTNode_1.createIdentifierNode('type'), [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: <type, type>', () => equal(parse('@tag id: <type, type>'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, null)
                ])));
                it('should parse @tag id: <type, type> - description', () => equal(parse('@tag id: <type, type> - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createTupleTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ])), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End tuple type
            /*
             * ====================
             * Parse parenthesized type
             * ====================
             */
            describe('parse parenthesized type', () => {
                it('should parse @tag id: (type)', () => equal(parse('@tag id: (type)'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, null)
                ])));
                it('should parse @tag id: (type) - description', () => equal(parse('@tag id: (type) - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End parenthesized type
            /*
             * ====================
             * Parse unary type
             * ====================
             */
            describe('parse unary type', () => {
                it('should parse @tag id: *type', () => equal(parse('@tag id: *type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnaryTypeNode('*', XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))), null, null)
                ])));
                it('should parse @tag id: *type - description', () => equal(parse('@tag id: *type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnaryTypeNode('*', XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: &type', () => equal(parse('@tag id: &type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnaryTypeNode('&', XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))), null, null)
                ])));
                it('should parse @tag id: &type - description', () => equal(parse('@tag id: &type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnaryTypeNode('&', XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End unary type
            /*
             * ====================
             * Parse object type
             * ====================
             */
            describe('parse object type', () => {
                it('should parse @tag id: {}', () => equal(parse('@tag id: {}'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode()), null, null)
                ])));
                it('should parse @tag id: {} - description', () => equal(parse('@tag id: {} - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode()), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: { type : type }', () => equal(parse('@tag id: { type : type }'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ])), null, null)
                ])));
                it('should parse @tag id: { type : type } - description', () => equal(parse('@tag id: { type : type } - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ])), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: { type: { type: type } }', () => equal(parse('@tag id: { type: { type: type } }'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                            XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                        ])))
                    ])), null, null)
                ])));
                it('should parse @tag id: { type: { type: type } } - description', () => equal(parse('@tag id: { type : { type: type } } - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                            XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                        ])))
                    ])), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End object type
            /*
             * ====================
             * Parse array type
             * ====================
             */
            describe('parse array type', () => {
                it('should parse @tag id: type[]', () => equal(parse('@tag id: type[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)), null, null)
                ])));
                it('should parse @tag id: type[] - description', () => equal(parse('@tag id: type[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (type & type)[]', () => equal(parse('@tag id: (type & type)[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, null)
                ])));
                it('should parse @tag id: (type & type)[] - description', () => equal(parse('@tag id: (type & type)[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (type | type)[]', () => equal(parse('@tag id: (type | type)[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, null)
                ])));
                it('should parse @tag id: (type | type)[] - description', () => equal(parse('@tag id: (type | type)[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: type[][]', () => equal(parse('@tag id: type[][]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)), null, null)
                ])));
                it('should parse @tag id: type[][] - description', () => equal(parse('@tag id: type[][] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: [type]', () => equal(parse('@tag id: [type]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ], null)), null, null)
                ])));
                it('should parse @tag id: [type] - description', () => equal(parse('@tag id: [type] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ], null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: [type, type]', () => equal(parse('@tag id: [type, type]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ], null)), null, null)
                ])));
                it('should parse @tag id: [type, type] - description', () => equal(parse('@tag id: [type, type] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(null, [
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))),
                        XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type')))
                    ], null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: { type: type }[]', () => equal(parse('@tag id: { type: type }[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ])), null)), null, null)
                ])));
                it('should parse @tag id: { type: type }[] - description', () => equal(parse('@tag id: { type: type }[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                        XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))
                    ])), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
                it('should parse @tag id: (() => type)[]', () => equal(parse('@tag id: (() => type)[]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, null)
                ])));
                it('should parse @tag id: (() => type)[] - description', () => equal(parse('@tag id: (() => type)[] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createArrayTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createParenthesizedTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createLambdaTypeNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))))), null)), null, XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End array type
        }); // End parse type
        describe('parse assigned annotations', () => {
            /*
             * ==========================
             * Parse literal expression
             * ==========================
             */
            describe('parse literal expression', () => {
                describe('parse number literal', () => {
                    it('should parse @tag id = 0', () => equal(parse('@tag id = 0'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0')), null)
                    ])));
                    it('should parse @tag id = 0 - description', () => equal(parse('@tag id = 0 - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                    it('should parse @tag id = 0.1', () => equal(parse('@tag id = 0.1'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0.1')), null)
                    ])));
                    it('should parse @tag id = 0.1 - description', () => equal(parse('@tag id = 0.1 - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0.1')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                    it('should parse @tag id = 0xffff', () => equal(parse('@tag id = 0xffff'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0xffff')), null)
                    ])));
                    it('should parse @tag id = 0xffff - description', () => equal(parse('@tag id = 0xffff - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0xffff')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                    it('should parse @tag id = 0o3', () => equal(parse('@tag id = 0o3'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0o3')), null)
                    ])));
                    it('should parse @tag id = 0o3 - description', () => equal(parse('@tag id = 0o3 - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0o3')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                    it('should parse @tag id = 0b10', () => equal(parse('@tag id = 0b10'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0b10')), null)
                    ])));
                    it('should parse @tag id = 0b10 - description', () => equal(parse('@tag id = 0b10 - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0b10')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                }); // End number literal
                describe('parse boolean literal', () => {
                    it('should parse @tag id = true', () => equal(parse('@tag id = true'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('boolean', 'true')), null)
                    ])));
                    it('should parse @tag id = true - description', () => equal(parse('@tag id = true - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('boolean', 'true')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                    it('should parse @tag id = false', () => equal(parse('@tag id = false'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('boolean', 'false')), null)
                    ])));
                    it('should parse @tag id = false - description', () => equal(parse('@tag id = false - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('boolean', 'false')), XDocASTNode_1.createDescriptionNode('description', []))
                    ])));
                }); // End boolean literal
                describe('parse character literal', () => {
                    it('should parse @tag id = \'c\'', () => equal(parse('@tag id = \'c\''), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('character', '\'c\'')), null)
                    ])));
                    it('should parse @tag id = \'c\' - description', () => equal(parse('@tag id = \'c\' - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('character', '\'c\'')), XDocASTNode_1.createDescriptionNode('description'))
                    ])));
                }); // End character literal
                describe('parse string literal', () => {
                    it('should parse @tag id = \"hello\"', () => equal(parse('@tag id = \"hello\"'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '\"hello\"')), null)
                    ])));
                    it('should parse @tag id = \"hello\" - description', () => equal(parse('@tag id = \"hello\" - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '\"hello\"')), XDocASTNode_1.createDescriptionNode('description'))
                    ])));
                    it('should parse @tag id = \'hello\'', () => equal(parse('@tag id = \'hello\''), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '\'hello\'')), null)
                    ])));
                    it('should parse @tag id = \'hello\' - description', () => equal(parse('@tag id = \'hello\' - description'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '\'hello\'')), XDocASTNode_1.createDescriptionNode('description'))
                    ])));
                }); // End string literal
                describe('parse null literal', () => {
                    it('should parse @tag id = null', () => equal(parse('@tag id = null'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('null', 'null')), null)
                    ])));
                    it('should parse @tag id = undefined', () => equal(parse('@tag id = undefined'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('null', 'undefined')), null)
                    ])));
                }); // End null literal
            }); // End literal expression
            /*
            * ==========================
            * Parse unary expression
            * ==========================
            */
            describe('parse unary expression', () => {
                it('should parse @tag id = -1', () => equal(parse('@tag id = -1'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createUnaryExpressionNode('-', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                ])));
                it('should parse @tag id = -1 - description', () => equal(parse('@tag id = -1 - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createUnaryExpressionNode('-', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // Emd unary expression
            /*
            * ==========================
            * Parse binary expression
            * ==========================
            */
            describe('parse binary expression', () => {
                it('should parse @tag id = 1 + 1', () => equal(parse('@tag id = 1 + 1'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('+', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                ])));
                it('should parse @tag id = 1 + 1 - description', () => equal(parse('@tag id = 1 + 1 - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('+', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = 1 - 1', () => equal(parse('@tag id = 1 - 1'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('-', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                ])));
                it('should parse @tag id = 1 - 1 - description', () => equal(parse('@tag id = 1 - 1 - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('-', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = 1 * 1', () => equal(parse('@tag id = 1 * 1'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('*', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                ])));
                it('should parse @tag id = 1 * 1 - description', () => equal(parse('@tag id = 1 * 1 - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('*', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = 1 / 1', () => equal(parse('@tag id = 1 / 1'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('/', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                ])));
                it('should parse @tag id = 1 / 1 - description', () => equal(parse('@tag id = 1 / 1 - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode('/', XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
            }); // End binary expression
            /*
            * ==========================
            * Parse array expression
            * ==========================
            */
            describe('parse array expression', () => {
                it('should parse @tag id = []', () => equal(parse('@tag id = []'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode()), null)
                ])));
                it('should parse @tag id = [] - description', () => equal(parse('@tag id = [] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode()), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = [0]', () => equal(parse('@tag id = [0]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode([
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0'))
                    ])), null)
                ])));
                it('should parse @tag id = [0] - description', () => equal(parse('@tag id = [0] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode([
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0'))
                    ])), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = [0, 1]', () => equal(parse('@tag id = [0, 1]'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode([
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0')),
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1'))
                    ])), null)
                ])));
                it('should parse @tag id = [0, 1] - description', () => equal(parse('@tag id = [0, 1] - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode([
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '0')),
                        XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1'))
                    ])), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
            }); // End array expression
            /*
            * ==========================
            * Parse object expression
            * ==========================
            */
            describe('parse object expression', () => {
                it('should parse @tag id = {}', () => equal(parse('@tag id = {}'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode()), null)
                ])));
                it('should parse @tag id = {} - description', () => equal(parse('@tag id = {} - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode()), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = { "a": "b" }', () => equal(parse('@tag id = { "a": "b" }'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode([
                        XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"a"'), XDocASTNode_1.createLiteralExpressionNode('string', '"b"'))
                    ])), null)
                ])));
                it('should parse @tag id = { "a": "b" } - description', () => equal(parse('@tag id = { "a": "b" } - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode([
                        XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"a"'), XDocASTNode_1.createLiteralExpressionNode('string', '"b"'))
                    ])), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = { "a": { "b": "c" } }', () => equal(parse('@tag id = { "a": { "b": "c" } }'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode([
                        XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"a"'), XDocASTNode_1.createObjectExpressionNode([
                            XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"b"'), XDocASTNode_1.createLiteralExpressionNode('string', '"c"'))
                        ]))
                    ])), null)
                ])));
                it('should parse @tag id = { "a": { "b": "c" } } - description', () => equal(parse('@tag id = { "a": { "b": "c" } } - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createObjectExpressionNode([
                        XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"a"'), XDocASTNode_1.createObjectExpressionNode([
                            XDocASTNode_1.createObjectPairExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"b"'), XDocASTNode_1.createLiteralExpressionNode('string', '"c"'))
                        ]))
                    ])), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
            }); // End object expression
            /*
            * ==========================
            * Parse lambda expression
            * ==========================
            */
            describe('parse lambda Expression', () => {
                it('should parse @tag id = () => type', () => equal(parse('@tag id = () => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLambdaExpressionNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null)
                ])));
                it('should parse @tag id = () => type - description', () => equal(parse('@tag id = () => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLambdaExpressionNode(null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
                it('should parse @tag id = (id) => type', () => equal(parse('@tag id = (id) => type'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLambdaExpressionNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'))
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), null)
                ])));
                it('should parse @tag id = (id) => type - description', () => equal(parse('@tag id = (id) => type - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLambdaExpressionNode(XDocASTNode_1.createFormalParemeterSequenceNode([
                        XDocASTNode_1.createParameterNode(XDocASTNode_1.createIdentifierNode('id'))
                    ]), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('type'))))), XDocASTNode_1.createDescriptionNode('description', []))
                ])));
            }); // End lambda expression
            /*
            * ==============================
            * Parse parenthesized expression
            * ==============================
            */
            describe('parse parenthesized expression', () => {
                it('should parse @tag id = (1)', () => {
                    it('should parse @tag id = (1)', () => equal(parse('@tag id = (1)'), documentation([
                        XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createParenthesizedExpressioneNode(XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), null)
                    ])));
                });
                it('should parse @tag id = (1) - description', () => equal(parse('@tag id = (1) - description'), documentation([
                    XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, XDocASTNode_1.createExpressionNode(XDocASTNode_1.createParenthesizedExpressioneNode(XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '1')))), XDocASTNode_1.createDescriptionNode('description'))
                ])));
            }); // End parenthesized expression
        }); // End expressions
    }); // End parse complex annotations
    describe('parse inline annotations', () => {
        it('should parse @tag id - description {@inline description}', () => {
            it('should parse @tag - description {@inline description}', () => equal(parse('@tag - description'), documentation([
                XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), null, null, null, XDocASTNode_1.createDescriptionNode('description {@inline description}', [
                    XDocASTNode_1.createInlineTagNode(XDocASTNode_1.createIdentifierNode('inline'), 'description')
                ]))
            ])));
        });
    });
    describe('parse a real-world annotation', () => {
        let annotation = FS.readFileSync(`${process.cwd()}/test/annotation.txt`, 'utf-8');
        let output = annotation.split('\n').map(line => '\t' + line).join('\n');
        it(`should parse:\n${output}`, () => equal(parse(annotation), documentation([
            // @function myHero
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('function')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('myHero')), null, null, null),
            // @param name: string = "Deku" - The name of a hero.
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('param')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('name')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('string'))), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('string', '"Deku"')), XDocASTNode_1.createDescriptionNode('The name of a hero.')),
            // @param age: number = 15 - The age of a hero
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('param')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('age')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('number'))), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '15')), XDocASTNode_1.createDescriptionNode('The age of a hero.')),
            // @param strength: number = 100 - The strength of a hero
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('param')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('strength')), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('number'))), XDocASTNode_1.createExpressionNode(XDocASTNode_1.createLiteralExpressionNode('number', '100')), XDocASTNode_1.createDescriptionNode('The strength of a hero.')),
            // @return: { name: string, age: number, strength: number }
            XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('return')), null, XDocASTNode_1.createTypeNode(XDocASTNode_1.createObjectTypeNode([
                // name: string
                XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('name'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('string')))),
                // age: number
                XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('age'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('number')))),
                // strength: number
                XDocASTNode_1.createObjectPairTypeNode(XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('strength'))), XDocASTNode_1.createTypeNode(XDocASTNode_1.createPrimaryTypeNode(XDocASTNode_1.createIdentifierNode('number'))))
            ])), null, null)
        ])));
    }); // End real-world annotation
}); // End test
//# sourceMappingURL=data:application/json;base64,