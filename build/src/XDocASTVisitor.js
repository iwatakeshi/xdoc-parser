"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Parser = require("./XDocSyntaxParser");
require("./XDocSyntaxParserVisitor");
const XDocASTNode_1 = require("./XDocASTNode");
/**
 * XDocAST is a class that converts a Antlr parse tree
 * into a Javascript tree object.
 *
 * # API
 *
 * ```
 * @class XDocAST
 * ```
 */
class XDocASTVisitor {
    constructor(documentation, options) {
        this.options = {
            showNodeText: false
        };
        /**
         * Converts the Antlr parse tree into a JavaScript tree object.
         *
         * # API
         *
         * ```
         * @method visit
         * @param context: Parser.DocumentationConext
         * @return: {
         *  name?: string,
         *  id?: {},
         *  value?: {},
         *  type?: {},
         *  description?: {}
         * }[]
         * ```
         */
        this.visit = () => {
            return this.visitDocumentation(this.documentation);
        };
        /* Documentation visitor */
        this.visitDocumentation = (context) => {
            if (context.body()) {
                return XDocASTNode_1.createDocumentationNode(this.visitBody(context.body()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitBody = (context) => {
            if (context.annotations()) {
                return XDocASTNode_1.createBodyNode(this.visitAnnotations(context.annotations()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitAnnotations = (context) => {
            if (context.tag()) {
                return (context.tag() || []).map(this.visitTag);
            }
        };
        this.visitTag = (context) => {
            let name, identifier, type, expression, description;
            if (context.tagName()) {
                name = this.visitTagName(context.tagName());
            }
            if (context.tagIdentifier()) {
                identifier = this.visitTagIdentifier(context.tagIdentifier());
            }
            if (context.type()) {
                type = this.visitType(context.type());
            }
            if (context.expression()) {
                expression = this.visitExpression(context.expression());
            }
            if (context.description()) {
                description = this.visitDescription(context.description());
            }
            return XDocASTNode_1.createTagNode(name, identifier, type, expression, description, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTagName = (context) => {
            if (context.identifier()) {
                return XDocASTNode_1.createTagNameNode(this.visitIdentifier(context.identifier()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitTagIdentifier = (context) => {
            let identifier, property;
            if (context.identifier()) {
                identifier = this.visitIdentifier(context.identifier());
            }
            if (context.optionalTagIdentifier()) {
                identifier = this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            }
            if (context.propertyTagIdentifier()) {
                property = this.visitPropertyTagIdentifier(context.propertyTagIdentifier());
            }
            return XDocASTNode_1.createTagIdentifierNode(identifier, property, this.options.showNodeText ? context.text : undefined);
        };
        this.visitPropertyTagIdentifier = (context) => {
            // Assume 'context' is defined.
            let identifier = context.identifier() ?
                this.visitIdentifier(context.identifier()) :
                this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            // A property must exist since by grammar:
            // (optionalTagIdentifier | identifier) ('.' optionalTagOrIdentifier)+
            let property = context.optionalTagOrIdentifier()
                .map(this.visitOptionalTagOrIdentifier);
            // Add the identifier to the beginning of the array
            property.unshift(identifier);
            return XDocASTNode_1.createPropertyTagIdentifierNode(property, context.text);
        };
        this.visitOptionalTagIdentifer = (context) => {
            if (context.optionalIdentifier()) {
                return XDocASTNode_1.createOptionalTagIdentifierNode(this.visitOptionalIdentifier(context.optionalIdentifier()));
            }
        };
        this.visitOptionalTagOrIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.optionalTagIdentifier()) {
                return this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            }
        };
        this.visitIdentifier = (context, optional = false) => {
            if (context.ID()) {
                return XDocASTNode_1.createIdentifierNode(context.ID().text, optional, []);
            }
        };
        /* Type visitor */
        this.visitType = (context, optional = false) => {
            // Intersections
            if (context.PIPE()) {
                return XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(this.visitType(context instanceof Parser.TypeContext ? context.type(0) : context.notArrayType(0)), this.visitType(context instanceof Parser.TypeContext ? context.type(1) : context.notArrayType(1)), this.options.showNodeText ? context.text : undefined), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.AMP()) { // Unions
                return XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(this.visitType(context instanceof Parser.TypeContext ? context.type(0) : context.notArrayType(0)), this.visitType(context instanceof Parser.TypeContext ? context.type(1) : context.notArrayType(1)), this.options.showNodeText ? context.text : undefined), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.lambdaType()) { // Lambda functions i.e. (id) => type
                return XDocASTNode_1.createTypeNode(this.visitLambdaType(context.lambdaType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.tupleType()) { // id<type, type>
                return XDocASTNode_1.createTypeNode(this.visitTuple(context.tupleType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.primaryType()) { // Primary
                return XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.parenthesizedType()) { // (expression)
                return XDocASTNode_1.createTypeNode(this.visitParenthesizedType(context.parenthesizedType(), optional), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.unaryType()) {
                return XDocASTNode_1.createTypeNode(this.visitUnaryType(context.unaryType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.objectType()) { // { ... }
                return XDocASTNode_1.createTypeNode(this.visitObjectType(context.objectType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context instanceof Parser.TypeContext && context.arrayType()) { // [ ... ]
                return XDocASTNode_1.createTypeNode(this.visitArrayType(context.arrayType()), optional, this.options.showNodeText ? context.text : undefined);
            }
        };
        /* Lambda visitor */
        this.visitLambdaType = (context) => {
            if (context.formalParameterSequence()) {
                return XDocASTNode_1.createLambdaTypeNode(this.visitLambdaFormalParameterSequence(context.formalParameterSequence()), this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
            }
            else if (context.parameter()) {
                return XDocASTNode_1.createLambdaTypeNode(this.visitLambdaFormalParameterSequence(context.parameter()), this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
            }
            return XDocASTNode_1.createLambdaTypeNode(null, this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitLambdaFormalParameterSequence = (context) => {
            if (context instanceof Parser.ParameterContext) {
                return XDocASTNode_1.createFormalParemeterSequenceNode([this.visitParameter(context)]);
            }
            return XDocASTNode_1.createFormalParemeterSequenceNode(this.visitParameters(context.parameter()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitParameters = (contexts) => {
            return contexts.map(context => {
                return this.visitParameter(context);
            });
        };
        this.visitParameter = (context) => {
            let identifier = this.visitIdentifier(context.identifier());
            let type;
            if (context.type()) {
                type = this.visitType(context.type());
            }
            return XDocASTNode_1.createParameterNode(identifier, type, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTuple = (context) => {
            let identifier;
            let types;
            if (context.identifier()) {
                identifier = this.visitIdentifier(context.identifier());
            }
            if (context.tupleTypeSequence()) {
                types = this.visitTupleSequenceOrExtendedTypes(context.tupleTypeSequence());
            }
            return XDocASTNode_1.createTupleTypeNode(identifier, types, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTupleSequenceOrExtendedTypes = (context) => {
            let types = [];
            const mergeSequence = () => {
                types = [
                    ...types,
                    ..._.flattenDeep(context.tupleTypeSequence().map(this.visitTupleSequenceOrExtendedTypes.bind(this)))
                ];
            };
            if (context.EXTENDS()) {
                types.push(XDocASTNode_1.createTupleExtendedTypeNode(this.visitPrimaryType(context.primaryType(0)), this.visitPrimaryType(context.primaryType(1)), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.PIPE()) {
                types.push(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(0))), XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(1))), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.AMP()) {
                types.push(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(0))), XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(1))), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.primaryType().length === 1) {
                types = context.primaryType()
                    .map(primary => XDocASTNode_1.createTypeNode(this.visitPrimaryType(primary)));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
        };
        this.visitPrimaryType = (context) => {
            let primary;
            if (context.optionalIdentifier()) {
                primary = this.visitOptionalIdentifier(context.optionalIdentifier());
            }
            else if (context.identifierOrKeyword()) {
                primary = this.visitIdentifierOrKeyword(context.identifierOrKeyword());
            }
            else if (context.propertyIdentifier()) {
                primary = this.visitPropertyIdentifier(context.propertyIdentifier());
            }
            return XDocASTNode_1.createPrimaryTypeNode(primary, this.options.showNodeText ? context.text : undefined);
        };
        this.visitIdentifierOrKeyword = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.keyword()) {
                return this.visitKeyword(context.keyword());
            }
        };
        this.visitKeyword = (context) => {
            if (context.NullLiteral()) {
                return XDocASTNode_1.createKeywordNode(context.NullLiteral().text);
            }
        };
        this.visitParenthesizedType = (context, optional = false) => {
            if (context.type()) {
                return XDocASTNode_1.createParenthesizedTypeNode(this.visitType(context.type()), optional, this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitUnaryType = (context) => {
            return XDocASTNode_1.createUnaryTypeNode((context.AMP() || context.STAR()).text, this.visitPrimaryType(context.primaryType()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectType = (context) => {
            return XDocASTNode_1.createObjectTypeNode(this.visitObjectPairSequenceType(context.objectPairSequenceType()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectPairSequenceType = (context) => {
            return (context ? context.objectPairType() : []).map(pair => {
                return XDocASTNode_1.createObjectPairTypeNode(this.visitType(pair.type(0)), this.visitType(pair.type(1)), this.options.showNodeText ? pair.text : undefined);
            });
        };
        this.visitArrayType = (context) => {
            if (context.notArrayType()) {
                return XDocASTNode_1.createArrayTypeNode(this.visitType(context.notArrayType()), (context.type() || []).map(type => this.visitType(type)), this.options.showNodeText ? context.text : undefined);
            }
            return XDocASTNode_1.createArrayTypeNode(null, (context.type() || []).map(type => this.visitType(type)), this.options.showNodeText ? context.text : undefined);
        };
        this.visitPropertyIdentifier = (context) => {
            // Assume 'context' is defined.
            let identifier = context.identifier() ?
                this.visitIdentifier(context.identifier()) :
                this.visitOptionalIdentifier(context.optionalIdentifier());
            // A property must exist since by grammar:
            // (optionalIdentifier | identifier) ('.' optionalIdentifierOrIdentifier)+
            let property = context.optionalIdentifierOrIdentifier()
                .map(this.visitOptionalIdentifierOrIdentifier);
            // Add the identifier to the beginning of the array
            property.unshift(identifier);
            return XDocASTNode_1.createPropertyIdentifierNode(property, context.text);
        };
        this.visitOptionalIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier(), !!context.QUESTION());
            }
        };
        this.visitOptionalIdentifierOrIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.optionalIdentifier()) {
                return this.visitOptionalIdentifier(context.optionalIdentifier());
            }
        };
        /* Expression visitor */
        this.visitExpression = (context) => {
            if (context.unaryExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitUnaryExpression(context.unaryExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.expression().length > 1) {
                return XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode((context.PLUS() || context.MINUS() || context.STAR() || context.FORWARD_SLASH()).text, this.visitExpression(context.expression(0)), this.visitExpression(context.expression(1)), this.options.showNodeText ? context.text : undefined), this.options.showNodeText ? context.text : undefined);
            }
            if (context.arrayExpression()) {
                return XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode(this.visitArrayExpression(context.arrayExpression()), this.options.showNodeText ? context.arrayExpression().text : undefined), this.options.showNodeText ? context.text : undefined);
            }
            if (context.objectExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitObjectExpression(context.objectExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.lambdaExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitLambdaExpression(context.lambdaExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.literalExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitLiteralExpression(context.literalExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.parenthesizedExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitParenthesizedExpression(context.parenthesizedExpression()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitUnaryExpression = (context) => {
            return XDocASTNode_1.createUnaryExpressionNode((context.PLUS() || context.MINUS()).text, this.visitExpression(context.expression()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitArrayExpression = (context) => {
            return (context ? context.expression() : []).map(expression => {
                return this.visitExpression(expression);
            });
        };
        this.visitObjectExpression = (context) => {
            return XDocASTNode_1.createObjectExpressionNode(this.visitObjectPairSequenceExpression(context.objectPairSequenceExpression()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectPairSequenceExpression = (context) => {
            return (context ? context.objectPairExpression() : []).map(pair => {
                return XDocASTNode_1.createObjectPairExpressionNode(this.visitLiteralExpression(pair.literalExpression(0)), pair.objectExpression() ?
                    this.visitObjectExpression(pair.objectExpression()) :
                    this.visitLiteralExpression(pair.literalExpression(1)), this.options.showNodeText ? context.text : undefined);
            });
        };
        this.visitLambdaExpression = (context) => {
            return this.visitLambdaType(context);
        };
        this.visitParenthesizedExpression = (context) => {
            return XDocASTNode_1.createParenthesizedExpressioneNode(this.visitExpression(context.expression()));
        };
        this.visitLiteralExpression = (context) => {
            let node = { literal: {} };
            if (context.NumberLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('number', context.NumberLiteral().text);
            }
            if (context.BooleanLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('boolean', context.BooleanLiteral().text);
            }
            if (context.CharacterLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('character', context.CharacterLiteral().text);
            }
            if (context.StringLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('string', context.StringLiteral().text);
            }
            if (context.NullLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('null', context.NullLiteral().text);
            }
        };
        /* Description visitor */
        this.visitDescription = (context) => {
            return XDocASTNode_1.createDescriptionNode(context.text, this.visitDescriptionLine(context.descriptionLine()));
        };
        this.visitDescriptionLine = (context) => {
            return this.visitDescriptionLineElement(context.descriptionLineElement());
        };
        this.visitDescriptionLineElement = (context) => {
            return (context || []).map(element => {
                return element.inlineTag() ? this.visitInlineTag(element.inlineTag()) : undefined;
            }).filter(element => element !== undefined);
        };
        this.visitInlineTag = (context) => {
            return XDocASTNode_1.createInlineTagNode(this.visitIdentifier(context.inlineTagName().identifier()), this.visitInlineTagBody(context.inlineTagBody()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitInlineTagBody = (context) => {
            return context.braceBody().map(body => body.text).join('');
        };
        Object.assign(this.options, options);
        this.documentation = documentation;
    }
}
exports.default = XDocASTVisitor;
//# sourceMappingURL=data:application/json;base64,