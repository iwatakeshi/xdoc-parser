"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Parser = require("./XDocSyntaxParser");
require("./XDocSyntaxParserVisitor");
const XDocASTNode_1 = require("./XDocASTNode");
/**
 * XDocAST is a class that converts a Antlr parse tree
 * into a Javascript tree object.
 *
 * # API
 *
 * ```
 * @class XDocAST
 * ```
 */
class XDocASTVisitor {
    constructor(documentation, options) {
        this.options = {
            showNodeText: false
        };
        /**
         * Converts the Antlr parse tree into a JavaScript tree object.
         *
         * # API
         *
         * ```
         * @method visit
         * @param context: Parser.DocumentationConext
         * @return: {
         *  name?: string,
         *  id?: {},
         *  value?: {},
         *  type?: {},
         *  description?: {}
         * }[]
         * ```
         */
        this.visit = () => {
            return this.visitDocumentation(this.documentation);
        };
        /* Documentation visitor */
        this.visitDocumentation = (context) => {
            if (context.body()) {
                return XDocASTNode_1.createDocumentationNode(this.visitBody(context.body()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitBody = (context) => {
            if (context.annotations()) {
                return XDocASTNode_1.createBodyNode(this.visitAnnotations(context.annotations()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitAnnotations = (context) => {
            if (context.tag()) {
                return (context.tag() || []).map(this.visitTag);
            }
        };
        this.visitTag = (context) => {
            let name, identifier, type, expression, description;
            if (context.tagName()) {
                name = this.visitTagName(context.tagName());
            }
            if (context.tagIdentifier()) {
                identifier = this.visitTagIdentifier(context.tagIdentifier());
            }
            if (context.type()) {
                type = this.visitType(context.type());
            }
            if (context.expression()) {
                expression = this.visitExpression(context.expression());
            }
            if (context.description()) {
                description = this.visitDescription(context.description());
            }
            return XDocASTNode_1.createTagNode(name, identifier, type, expression, description, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTagName = (context) => {
            if (context.identifier()) {
                return XDocASTNode_1.createTagNameNode(this.visitIdentifier(context.identifier()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitTagIdentifier = (context) => {
            let identifier, property;
            if (context.identifier()) {
                identifier = this.visitIdentifier(context.identifier());
            }
            if (context.optionalTagIdentifier()) {
                identifier = this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            }
            if (context.propertyTagIdentifier()) {
                property = this.visitPropertyTagIdentifier(context.propertyTagIdentifier());
            }
            return XDocASTNode_1.createTagIdentifierNode(identifier, property, this.options.showNodeText ? context.text : undefined);
        };
        this.visitPropertyTagIdentifier = (context) => {
            // Assume 'context' is defined.
            let identifier = context.identifier() ?
                this.visitIdentifier(context.identifier()) :
                this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            // A property must exist since by grammar:
            // (optionalTagIdentifier | identifier) ('.' optionalTagOrIdentifier)+
            let property = context.optionalTagOrIdentifier()
                .map(this.visitOptionalTagOrIdentifier);
            // Add the identifier to the beginning of the array
            property.unshift(identifier);
            return XDocASTNode_1.createPropertyTagIdentifierNode(property, context.text);
        };
        this.visitOptionalTagIdentifer = (context) => {
            if (context.optionalIdentifier()) {
                return XDocASTNode_1.createOptionalTagIdentifierNode(this.visitOptionalIdentifier(context.optionalIdentifier()));
            }
        };
        this.visitOptionalTagOrIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.optionalTagIdentifier()) {
                return this.visitOptionalTagIdentifer(context.optionalTagIdentifier());
            }
        };
        this.visitIdentifier = (context, optional = false) => {
            if (context.ID()) {
                return XDocASTNode_1.createIdentifierNode(context.ID().text, optional, []);
            }
        };
        /* Type visitor */
        this.visitType = (context, optional = false) => {
            // Intersections
            if (context.PIPE()) {
                return XDocASTNode_1.createTypeNode(XDocASTNode_1.createIntersectTypeNode(this.visitType(context instanceof Parser.TypeContext ? context.type(0) : context.notArrayType(0)), this.visitType(context instanceof Parser.TypeContext ? context.type(1) : context.notArrayType(1)), this.options.showNodeText ? context.text : undefined), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.AMP()) { // Unions
                return XDocASTNode_1.createTypeNode(XDocASTNode_1.createUnionTypeNode(this.visitType(context instanceof Parser.TypeContext ? context.type(0) : context.notArrayType(0)), this.visitType(context instanceof Parser.TypeContext ? context.type(1) : context.notArrayType(1)), this.options.showNodeText ? context.text : undefined), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.lambdaType()) { // Lambda functions i.e. (id) => type
                return XDocASTNode_1.createTypeNode(this.visitLambdaType(context.lambdaType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.tupleType()) { // id<type, type>
                return XDocASTNode_1.createTypeNode(this.visitTuple(context.tupleType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.primaryType()) { // Primary
                return XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.parenthesizedType()) { // (expression)
                return XDocASTNode_1.createTypeNode(this.visitParenthesizedType(context.parenthesizedType(), optional), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.unaryType()) {
                return XDocASTNode_1.createTypeNode(this.visitUnaryType(context.unaryType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context.objectType()) { // { ... }
                return XDocASTNode_1.createTypeNode(this.visitObjectType(context.objectType()), optional, this.options.showNodeText ? context.text : undefined);
            }
            if (context instanceof Parser.TypeContext && context.arrayType()) { // [ ... ]
                return XDocASTNode_1.createTypeNode(this.visitArrayType(context.arrayType()), optional, this.options.showNodeText ? context.text : undefined);
            }
        };
        /* Lambda visitor */
        this.visitLambdaType = (context) => {
            if (context.formalParameterSequence()) {
                return XDocASTNode_1.createLambdaTypeNode(this.visitLambdaFormalParameterSequence(context.formalParameterSequence()), this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
            }
            else if (context.parameter()) {
                return XDocASTNode_1.createLambdaTypeNode(this.visitLambdaFormalParameterSequence(context.parameter()), this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
            }
            return XDocASTNode_1.createLambdaTypeNode(null, this.visitType(context.type(), !!context.QUESTION()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitLambdaFormalParameterSequence = (context) => {
            if (context instanceof Parser.ParameterContext) {
                return XDocASTNode_1.createFormalParemeterSequenceNode([this.visitParameter(context)]);
            }
            return XDocASTNode_1.createFormalParemeterSequenceNode(this.visitParameters(context.parameter()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitParameters = (contexts) => {
            return contexts.map(context => {
                return this.visitParameter(context);
            });
        };
        this.visitParameter = (context) => {
            let identifier = this.visitIdentifier(context.identifier());
            let type;
            if (context.type()) {
                type = this.visitType(context.type());
            }
            return XDocASTNode_1.createParameterNode(identifier, type, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTuple = (context) => {
            let identifier;
            let types;
            if (context.identifier()) {
                identifier = this.visitIdentifier(context.identifier());
            }
            if (context.tupleTypeSequence()) {
                types = this.visitTupleSequenceOrExtendedTypes(context.tupleTypeSequence());
            }
            return XDocASTNode_1.createTupleTypeNode(identifier, types, this.options.showNodeText ? context.text : undefined);
        };
        this.visitTupleSequenceOrExtendedTypes = (context) => {
            let types = [];
            const mergeSequence = () => {
                types = [
                    ...types,
                    ..._.flattenDeep(context.tupleTypeSequence().map(this.visitTupleSequenceOrExtendedTypes.bind(this)))
                ];
            };
            if (context.EXTENDS()) {
                types.push(XDocASTNode_1.createTupleExtendedTypeNode(this.visitPrimaryType(context.primaryType(0)), this.visitPrimaryType(context.primaryType(1)), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.PIPE()) {
                types.push(XDocASTNode_1.createIntersectTypeNode(XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(0))), XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(1))), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.AMP()) {
                types.push(XDocASTNode_1.createUnionTypeNode(XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(0))), XDocASTNode_1.createTypeNode(this.visitPrimaryType(context.primaryType(1))), this.options.showNodeText ? context.text : undefined));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
            if (context.primaryType().length === 1) {
                types = context.primaryType()
                    .map(primary => XDocASTNode_1.createTypeNode(this.visitPrimaryType(primary)));
                if (context.tupleTypeSequence()) {
                    mergeSequence();
                }
                return types;
            }
        };
        this.visitPrimaryType = (context) => {
            let primary;
            if (context.optionalIdentifier()) {
                primary = this.visitOptionalIdentifier(context.optionalIdentifier());
            }
            else if (context.identifierOrKeyword()) {
                primary = this.visitIdentifierOrKeyword(context.identifierOrKeyword());
            }
            else if (context.propertyIdentifier()) {
                primary = this.visitPropertyIdentifier(context.propertyIdentifier());
            }
            return XDocASTNode_1.createPrimaryTypeNode(primary, this.options.showNodeText ? context.text : undefined);
        };
        this.visitIdentifierOrKeyword = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.keyword()) {
                return this.visitKeyword(context.keyword());
            }
        };
        this.visitKeyword = (context) => {
            if (context.NullLiteral()) {
                return XDocASTNode_1.createKeywordNode(context.NullLiteral().text);
            }
        };
        this.visitParenthesizedType = (context, optional = false) => {
            if (context.type()) {
                return XDocASTNode_1.createParenthesizedTypeNode(this.visitType(context.type()), optional, this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitUnaryType = (context) => {
            return XDocASTNode_1.createUnaryTypeNode((context.AMP() || context.STAR()).text, this.visitPrimaryType(context.primaryType()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectType = (context) => {
            return XDocASTNode_1.createObjectTypeNode(this.visitObjectPairSequenceType(context.objectPairSequenceType()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectPairSequenceType = (context) => {
            return (context ? context.objectPairType() : []).map(pair => {
                return XDocASTNode_1.createObjectPairTypeNode(this.visitType(pair.type(0)), this.visitType(pair.type(1)), this.options.showNodeText ? pair.text : undefined);
            });
        };
        this.visitArrayType = (context) => {
            if (context.notArrayType()) {
                return XDocASTNode_1.createArrayTypeNode(this.visitType(context.notArrayType()), (context.type() || []).map(type => this.visitType(type)), this.options.showNodeText ? context.text : undefined);
            }
            return XDocASTNode_1.createArrayTypeNode(null, (context.type() || []).map(type => this.visitType(type)), this.options.showNodeText ? context.text : undefined);
        };
        this.visitPropertyIdentifier = (context) => {
            // Assume 'context' is defined.
            let identifier = context.identifier() ?
                this.visitIdentifier(context.identifier()) :
                this.visitOptionalIdentifier(context.optionalIdentifier());
            // A property must exist since by grammar:
            // (optionalIdentifier | identifier) ('.' optionalIdentifierOrIdentifier)+
            let property = context.optionalIdentifierOrIdentifier()
                .map(this.visitOptionalIdentifierOrIdentifier);
            // Add the identifier to the beginning of the array
            property.unshift(identifier);
            return XDocASTNode_1.createPropertyIdentifierNode(property, context.text);
        };
        this.visitOptionalIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier(), !!context.QUESTION());
            }
        };
        this.visitOptionalIdentifierOrIdentifier = (context) => {
            if (context.identifier()) {
                return this.visitIdentifier(context.identifier());
            }
            if (context.optionalIdentifier()) {
                return this.visitOptionalIdentifier(context.optionalIdentifier());
            }
        };
        /* Expression visitor */
        this.visitExpression = (context) => {
            if (context.unaryExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitUnaryExpression(context.unaryExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.expression().length > 1) {
                return XDocASTNode_1.createExpressionNode(XDocASTNode_1.createBinaryExpressionNode((context.PLUS() || context.MINUS() || context.STAR() || context.FORWARD_SLASH()).text, this.visitExpression(context.expression(0)), this.visitExpression(context.expression(1)), this.options.showNodeText ? context.text : undefined), this.options.showNodeText ? context.text : undefined);
            }
            if (context.arrayExpression()) {
                return XDocASTNode_1.createExpressionNode(XDocASTNode_1.createArrayExpressionNode(this.visitArrayExpression(context.arrayExpression()), this.options.showNodeText ? context.arrayExpression().text : undefined), this.options.showNodeText ? context.text : undefined);
            }
            if (context.objectExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitObjectExpression(context.objectExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.lambdaExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitLambdaExpression(context.lambdaExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.literalExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitLiteralExpression(context.literalExpression()), this.options.showNodeText ? context.text : undefined);
            }
            if (context.parenthesizedExpression()) {
                return XDocASTNode_1.createExpressionNode(this.visitParenthesizedExpression(context.parenthesizedExpression()), this.options.showNodeText ? context.text : undefined);
            }
        };
        this.visitUnaryExpression = (context) => {
            return XDocASTNode_1.createUnaryExpressionNode((context.PLUS() || context.MINUS()).text, this.visitExpression(context.expression()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitArrayExpression = (context) => {
            return (context ? context.expression() : []).map(expression => {
                return this.visitExpression(expression);
            });
        };
        this.visitObjectExpression = (context) => {
            return XDocASTNode_1.createObjectExpressionNode(this.visitObjectPairSequenceExpression(context.objectPairSequenceExpression()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitObjectPairSequenceExpression = (context) => {
            return (context ? context.objectPairExpression() : []).map(pair => {
                return XDocASTNode_1.createObjectPairExpressionNode(this.visitLiteralExpression(pair.literalExpression(0)), pair.objectExpression() ?
                    this.visitObjectExpression(pair.objectExpression()) :
                    this.visitLiteralExpression(pair.literalExpression(1)), this.options.showNodeText ? context.text : undefined);
            });
        };
        this.visitLambdaExpression = (context) => {
            return this.visitLambdaType(context);
        };
        this.visitParenthesizedExpression = (context) => {
            return XDocASTNode_1.createParenthesizedExpressioneNode(this.visitExpression(context.expression()));
        };
        this.visitLiteralExpression = (context) => {
            let node = { literal: {} };
            if (context.NumberLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('number', context.NumberLiteral().text);
            }
            if (context.BooleanLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('boolean', context.BooleanLiteral().text);
            }
            if (context.CharacterLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('character', context.CharacterLiteral().text);
            }
            if (context.StringLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('string', context.StringLiteral().text);
            }
            if (context.NullLiteral()) {
                return XDocASTNode_1.createLiteralExpressionNode('null', context.NullLiteral().text);
            }
        };
        /* Description visitor */
        this.visitDescription = (context) => {
            return XDocASTNode_1.createDescriptionNode(context.text, this.visitDescriptionLine(context.descriptionLine()));
        };
        this.visitDescriptionLine = (context) => {
            return this.visitDescriptionLineElement(context.descriptionLineElement());
        };
        this.visitDescriptionLineElement = (context) => {
            return (context || []).map(element => {
                return element.inlineTag() ? this.visitInlineTag(element.inlineTag()) : undefined;
            }).filter(element => element !== undefined);
        };
        this.visitInlineTag = (context) => {
            return XDocASTNode_1.createInlineTagNode(this.visitIdentifier(context.inlineTagName().identifier()), this.visitInlineTagBody(context.inlineTagBody()), this.options.showNodeText ? context.text : undefined);
        };
        this.visitInlineTagBody = (context) => {
            return context.braceBody().map(body => body.text).join('');
        };
        Object.assign(this.options, options);
        this.documentation = documentation;
    }
}
exports.default = XDocASTVisitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWERvY0FTVFZpc2l0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvWERvY0FTVFZpc2l0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0QkFBNEI7QUFDNUIsNkNBQTZDO0FBQzdDLHFDQUFtQztBQUNuQywrQ0FrRXVCO0FBTXZCOzs7Ozs7Ozs7R0FTRztBQUNIO0lBTUUsWUFBWSxhQUEwQyxFQUFFLE9BQXdDO1FBSnhGLFlBQU8sR0FBMEI7WUFDdkMsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQTtRQU1EOzs7Ozs7Ozs7Ozs7Ozs7O1dBZ0JHO1FBQ0gsVUFBSyxHQUFHLEdBQStCLEVBQUU7WUFDdkMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQTtRQUNELDJCQUEyQjtRQUUzQix1QkFBa0IsR0FBRyxDQUNuQixPQUFvQyxFQUNSLEVBQUU7WUFDOUIsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2xCLE9BQU8scUNBQXVCLENBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3JELENBQUE7YUFDRjtRQUNILENBQUMsQ0FBQTtRQUVELGNBQVMsR0FBRyxDQUNWLE9BQTJCLEVBQ1IsRUFBRTtZQUNyQixJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDekIsT0FBTyw0QkFBYyxDQUNuQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3JE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QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7WUFDbkYsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQTtRQUVELG1CQUFjLEdBQUcsQ0FBQyxPQUFnQyxFQUEwQixFQUFFO1lBQzVFLE9BQU8saUNBQW1CLENBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsRUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDckQsQ0FBQztRQUNKLENBQUMsQ0FBQTtRQUVELHVCQUFrQixHQUFHLENBQUMsT0FBb0MsRUFBVSxFQUFFO1lBQ3BFLE9BQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFBO1FBOW1CQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDckMsQ0FBQztDQTZtQkY7QUF0bkJELGlDQXNuQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tICcuL1hEb2NTeW50YXhQYXJzZXInO1xyXG5pbXBvcnQgJy4vWERvY1N5bnRheFBhcnNlclZpc2l0b3InO1xyXG5pbXBvcnQge1xyXG4gIEFubm90YXRpb25zTm9kZSxcclxuICBBcnJheVR5cGVOb2RlLFxyXG4gIEJvZHlOb2RlLFxyXG4gIGNyZWF0ZUFycmF5RXhwcmVzc2lvbk5vZGUsXHJcbiAgY3JlYXRlQXJyYXlUeXBlTm9kZSxcclxuICBjcmVhdGVCaW5hcnlFeHByZXNzaW9uTm9kZSxcclxuICBjcmVhdGVCb2R5Tm9kZSxcclxuICBjcmVhdGVEZXNjcmlwdGlvbk5vZGUsXHJcbiAgY3JlYXRlRG9jdW1lbnRhdGlvbk5vZGUsXHJcbiAgY3JlYXRlRXhwcmVzc2lvbk5vZGUsXHJcbiAgY3JlYXRlRm9ybWFsUGFyZW1ldGVyU2VxdWVuY2VOb2RlLFxyXG4gIGNyZWF0ZUlkZW50aWZpZXJOb2RlLFxyXG4gIGNyZWF0ZUlubGluZVRhZ05vZGUsXHJcbiAgY3JlYXRlSW50ZXJzZWN0VHlwZU5vZGUsXHJcbiAgY3JlYXRlS2V5d29yZE5vZGUsXHJcbiAgY3JlYXRlTGFtYmRhVHlwZU5vZGUsXHJcbiAgY3JlYXRlTGl0ZXJhbEV4cHJlc3Npb25Ob2RlLFxyXG4gIGNyZWF0ZU9iamVjdEV4cHJlc3Npb25Ob2RlLFxyXG4gIGNyZWF0ZU9iamVjdFBhaXJFeHByZXNzaW9uTm9kZSxcclxuICBjcmVhdGVPYmplY3RQYWlyVHlwZU5vZGUsXHJcbiAgY3JlYXRlT2JqZWN0VHlwZU5vZGUsXHJcbiAgY3JlYXRlUGFyYW1ldGVyTm9kZSxcclxuICBjcmVhdGVQYXJlbnRoZXNpemVkVHlwZU5vZGUsXHJcbiAgY3JlYXRlUHJpbWFyeVR5cGVOb2RlLFxyXG4gIGNyZWF0ZVByb3BlcnR5VGFnSWRlbnRpZmllck5vZGUsXHJcbiAgY3JlYXRlUHJvcGVydHlJZGVudGlmaWVyTm9kZSxcclxuICBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZSwgY3JlYXRlT3B0aW9uYWxUYWdJZGVudGlmaWVyTm9kZSxcclxuICBjcmVhdGVUYWdOYW1lTm9kZSxcclxuICBjcmVhdGVUYWdOb2RlLFxyXG4gIGNyZWF0ZVR1cGxlVHlwZU5vZGUsXHJcbiAgY3JlYXRlVHlwZU5vZGUsXHJcbiAgY3JlYXRlVW5hcnlFeHByZXNzaW9uTm9kZSxcclxuICBjcmVhdGVVbmFyeVR5cGVOb2RlLFxyXG4gIGNyZWF0ZVVuaW9uVHlwZU5vZGUsXHJcbiAgRGVzY3JpcHRpb25Ob2RlLFxyXG4gIERvY3VtZW50YXRpb25Ob2RlLFxyXG4gIEV4cHJlc3Npb25Ob2RlLFxyXG4gIEZvcm1hbFBhcmFtZXRlclNlcXVlbmNlTm9kZSxcclxuICBJZGVudGlmaWVyTm9kZSxcclxuICBJbmxpbmVUYWdOb2RlLFxyXG4gIEtleXdvcmROb2RlLFxyXG4gIExhbWJkYUV4cHJlc3Npb25Ob2RlLFxyXG4gIExhbWJkYVR5cGVOb2RlLFxyXG4gIExpdGVyYWxFeHByZXNzaW9uTm9kZSxcclxuICBPYmplY3RFeHByZXNzaW9uTm9kZSxcclxuICBPYmplY3RQYWlyRXhwcmVzc2lvbk5vZGUsXHJcbiAgT3B0aW9uYWxJZGVudGlmaWVyTm9kZSxcclxuICBPcHRpb25hbFRhZ0lkZW50aWZpZXJOb2RlLFxyXG4gIFBhcmFtZXRlck5vZGUsXHJcbiAgUGFyZW50aGVzaXplZEV4cHJlc3Npb25Ob2RlLFxyXG4gIFByb3BlcnR5VGFnSWRlbnRpZmllck5vZGUsXHJcbiAgVGFnSWRlbnRpZmllck5vZGUsXHJcbiAgVGFnTmFtZU5vZGUsXHJcbiAgVGFnTm9kZSxcclxuICBUdXBsZVR5cGVOb2RlLFxyXG4gIFR5cGVOb2RlLFxyXG4gIFVuYXJ5RXhwcmVzc2lvbk5vZGUsXHJcbiAgUHJvcGVydHlJZGVudGlmaWVyTm9kZSxcclxuICBQYXJlbnRoZXNpemVkVHlwZU5vZGUsXHJcbiAgY3JlYXRlUGFyZW50aGVzaXplZEV4cHJlc3Npb25lTm9kZSxcclxuICBQcmltYXJ5VHlwZU5vZGUsXHJcbiAgVW5hcnlUeXBlTm9kZSxcclxuICBPYmplY3RUeXBlTm9kZSxcclxuICBjcmVhdGVUdXBsZUV4dGVuZGVkVHlwZU5vZGUsXHJcbiAgVHVwbGVFeHRlbmRlZFR5cGVOb2RlLFxyXG59IGZyb20gJy4vWERvY0FTVE5vZGUnO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWERvY0FTVFZpc2l0b3JPcHRpb25zIHtcclxuICBzaG93Tm9kZVRleHQ6IGJvb2xlYW5cclxufVxyXG4vKipcclxuICogWERvY0FTVCBpcyBhIGNsYXNzIHRoYXQgY29udmVydHMgYSBBbnRsciBwYXJzZSB0cmVlXHJcbiAqIGludG8gYSBKYXZhc2NyaXB0IHRyZWUgb2JqZWN0LlxyXG4gKiBcclxuICogIyBBUElcclxuICogXHJcbiAqIGBgYFxyXG4gKiBAY2xhc3MgWERvY0FTVFxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhEb2NBU1RWaXNpdG9yIHtcclxuICBwcml2YXRlIGRvY3VtZW50YXRpb246IFBhcnNlci5Eb2N1bWVudGF0aW9uQ29udGV4dFxyXG4gIHByaXZhdGUgb3B0aW9uczogWERvY0FTVFZpc2l0b3JPcHRpb25zID0ge1xyXG4gICAgc2hvd05vZGVUZXh0OiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoZG9jdW1lbnRhdGlvbjogUGFyc2VyLkRvY3VtZW50YXRpb25Db250ZXh0LCBvcHRpb25zPzogUGFydGlhbDxYRG9jQVNUVmlzaXRvck9wdGlvbnM+KSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB0aGlzLmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyB0aGUgQW50bHIgcGFyc2UgdHJlZSBpbnRvIGEgSmF2YVNjcmlwdCB0cmVlIG9iamVjdC5cclxuICAgKiBcclxuICAgKiAjIEFQSVxyXG4gICAqIFxyXG4gICAqIGBgYFxyXG4gICAqIEBtZXRob2QgdmlzaXRcclxuICAgKiBAcGFyYW0gY29udGV4dDogUGFyc2VyLkRvY3VtZW50YXRpb25Db25leHRcclxuICAgKiBAcmV0dXJuOiB7IFxyXG4gICAqICBuYW1lPzogc3RyaW5nLCBcclxuICAgKiAgaWQ/OiB7fSwgXHJcbiAgICogIHZhbHVlPzoge30sIFxyXG4gICAqICB0eXBlPzoge30sIFxyXG4gICAqICBkZXNjcmlwdGlvbj86IHt9IFxyXG4gICAqIH1bXVxyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIHZpc2l0ID0gKCk6IFBhcnRpYWw8RG9jdW1lbnRhdGlvbk5vZGU+ID0+IHtcclxuICAgIHJldHVybiB0aGlzLnZpc2l0RG9jdW1lbnRhdGlvbih0aGlzLmRvY3VtZW50YXRpb24pO1xyXG4gIH1cclxuICAvKiBEb2N1bWVudGF0aW9uIHZpc2l0b3IgKi9cclxuXHJcbiAgdmlzaXREb2N1bWVudGF0aW9uID0gKFxyXG4gICAgY29udGV4dDogUGFyc2VyLkRvY3VtZW50YXRpb25Db250ZXh0XHJcbiAgKTogUGFydGlhbDxEb2N1bWVudGF0aW9uTm9kZT4gPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuYm9keSgpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVEb2N1bWVudGF0aW9uTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0Qm9keShjb250ZXh0LmJvZHkoKSksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2aXNpdEJvZHkgPSAoXHJcbiAgICBjb250ZXh0OiBQYXJzZXIuQm9keUNvbnRleHRcclxuICApOiBQYXJ0aWFsPEJvZHlOb2RlPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dC5hbm5vdGF0aW9ucygpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVCb2R5Tm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0QW5ub3RhdGlvbnMoY29udGV4dC5hbm5vdGF0aW9ucygpKSxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2aXNpdEFubm90YXRpb25zID0gKFxyXG4gICAgY29udGV4dDogUGFyc2VyLkFubm90YXRpb25zQ29udGV4dCxcclxuICApOiBQYXJ0aWFsPEFubm90YXRpb25zTm9kZT4gPT4ge1xyXG4gICAgaWYgKGNvbnRleHQudGFnKCkpIHtcclxuICAgICAgcmV0dXJuIChjb250ZXh0LnRhZygpIHx8IFtdKS5tYXAodGhpcy52aXNpdFRhZylcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICB2aXNpdFRhZyA9IChjb250ZXh0OiBQYXJzZXIuVGFnQ29udGV4dCk6IFBhcnRpYWw8VGFnTm9kZT4gPT4ge1xyXG4gICAgbGV0IG5hbWU6IFBhcnRpYWw8VGFnTmFtZU5vZGU+LFxyXG4gICAgICBpZGVudGlmaWVyOiBQYXJ0aWFsPFRhZ0lkZW50aWZpZXJOb2RlPixcclxuICAgICAgdHlwZTogUGFydGlhbDxUeXBlTm9kZT4sXHJcbiAgICAgIGV4cHJlc3Npb246IFBhcnRpYWw8RXhwcmVzc2lvbk5vZGU+LFxyXG4gICAgICBkZXNjcmlwdGlvbjogUGFydGlhbDxEZXNjcmlwdGlvbk5vZGU+O1xyXG5cclxuICAgIGlmIChjb250ZXh0LnRhZ05hbWUoKSkge1xyXG4gICAgICBuYW1lID0gdGhpcy52aXNpdFRhZ05hbWUoY29udGV4dC50YWdOYW1lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnRhZ0lkZW50aWZpZXIoKSkge1xyXG4gICAgICBpZGVudGlmaWVyID0gdGhpcy52aXNpdFRhZ0lkZW50aWZpZXIoY29udGV4dC50YWdJZGVudGlmaWVyKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnR5cGUoKSkge1xyXG4gICAgICB0eXBlID0gdGhpcy52aXNpdFR5cGUoY29udGV4dC50eXBlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmV4cHJlc3Npb24oKSkge1xyXG4gICAgICBleHByZXNzaW9uID0gdGhpcy52aXNpdEV4cHJlc3Npb24oY29udGV4dC5leHByZXNzaW9uKCkpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuZGVzY3JpcHRpb24oKSkge1xyXG4gICAgICBkZXNjcmlwdGlvbiA9IHRoaXMudmlzaXREZXNjcmlwdGlvbihjb250ZXh0LmRlc2NyaXB0aW9uKCkpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZVRhZ05vZGUobmFtZSwgaWRlbnRpZmllciwgdHlwZSwgZXhwcmVzc2lvbiwgZGVzY3JpcHRpb24sIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpXHJcbiAgfVxyXG5cclxuICB2aXNpdFRhZ05hbWUgPSAoY29udGV4dDogUGFyc2VyLlRhZ05hbWVDb250ZXh0KTogUGFydGlhbDxUYWdOYW1lTm9kZT4gPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuaWRlbnRpZmllcigpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVUYWdOYW1lTm9kZSh0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSksIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRUYWdJZGVudGlmaWVyID0gKGNvbnRleHQ6IFBhcnNlci5UYWdJZGVudGlmaWVyQ29udGV4dCk6IFBhcnRpYWw8VGFnSWRlbnRpZmllck5vZGU+ID0+IHtcclxuICAgIGxldCBpZGVudGlmaWVyOiBQYXJ0aWFsPElkZW50aWZpZXJOb2RlPiB8IFBhcnRpYWw8T3B0aW9uYWxJZGVudGlmaWVyTm9kZT4sXHJcbiAgICAgIHByb3BlcnR5OiBQYXJ0aWFsPFByb3BlcnR5VGFnSWRlbnRpZmllck5vZGU+O1xyXG4gICAgaWYgKGNvbnRleHQuaWRlbnRpZmllcigpKSB7XHJcbiAgICAgIGlkZW50aWZpZXIgPSB0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQub3B0aW9uYWxUYWdJZGVudGlmaWVyKCkpIHtcclxuICAgICAgaWRlbnRpZmllciA9IHRoaXMudmlzaXRPcHRpb25hbFRhZ0lkZW50aWZlcihjb250ZXh0Lm9wdGlvbmFsVGFnSWRlbnRpZmllcigpKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnByb3BlcnR5VGFnSWRlbnRpZmllcigpKSB7XHJcbiAgICAgIHByb3BlcnR5ID0gdGhpcy52aXNpdFByb3BlcnR5VGFnSWRlbnRpZmllcihjb250ZXh0LnByb3BlcnR5VGFnSWRlbnRpZmllcigpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3JlYXRlVGFnSWRlbnRpZmllck5vZGUoaWRlbnRpZmllciwgcHJvcGVydHksIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRQcm9wZXJ0eVRhZ0lkZW50aWZpZXIgPSAoY29udGV4dDogUGFyc2VyLlByb3BlcnR5VGFnSWRlbnRpZmllckNvbnRleHQpOiBQYXJ0aWFsPFByb3BlcnR5VGFnSWRlbnRpZmllck5vZGU+ID0+IHtcclxuXHJcbiAgICAvLyBBc3N1bWUgJ2NvbnRleHQnIGlzIGRlZmluZWQuXHJcbiAgICBsZXQgaWRlbnRpZmllciA9IGNvbnRleHQuaWRlbnRpZmllcigpID9cclxuICAgICAgdGhpcy52aXNpdElkZW50aWZpZXIoY29udGV4dC5pZGVudGlmaWVyKCkpIDpcclxuICAgICAgdGhpcy52aXNpdE9wdGlvbmFsVGFnSWRlbnRpZmVyKGNvbnRleHQub3B0aW9uYWxUYWdJZGVudGlmaWVyKCkpO1xyXG4gICAgLy8gQSBwcm9wZXJ0eSBtdXN0IGV4aXN0IHNpbmNlIGJ5IGdyYW1tYXI6XHJcbiAgICAvLyAob3B0aW9uYWxUYWdJZGVudGlmaWVyIHwgaWRlbnRpZmllcikgKCcuJyBvcHRpb25hbFRhZ09ySWRlbnRpZmllcikrXHJcbiAgICBsZXQgcHJvcGVydHkgPSBjb250ZXh0Lm9wdGlvbmFsVGFnT3JJZGVudGlmaWVyKClcclxuICAgICAgLm1hcCh0aGlzLnZpc2l0T3B0aW9uYWxUYWdPcklkZW50aWZpZXIpO1xyXG4gICAgLy8gQWRkIHRoZSBpZGVudGlmaWVyIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAgICBwcm9wZXJ0eS51bnNoaWZ0KGlkZW50aWZpZXIpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5VGFnSWRlbnRpZmllck5vZGUocHJvcGVydHksIGNvbnRleHQudGV4dCk7XHJcbiAgfVxyXG5cclxuICB2aXNpdE9wdGlvbmFsVGFnSWRlbnRpZmVyID0gKGNvbnRleHQ6IFBhcnNlci5PcHRpb25hbFRhZ0lkZW50aWZpZXJDb250ZXh0KTogUGFydGlhbDxPcHRpb25hbFRhZ0lkZW50aWZpZXJOb2RlPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dC5vcHRpb25hbElkZW50aWZpZXIoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlT3B0aW9uYWxUYWdJZGVudGlmaWVyTm9kZSh0aGlzLnZpc2l0T3B0aW9uYWxJZGVudGlmaWVyKGNvbnRleHQub3B0aW9uYWxJZGVudGlmaWVyKCkpKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRPcHRpb25hbFRhZ09ySWRlbnRpZmllciA9IChjb250ZXh0OiBQYXJzZXIuT3B0aW9uYWxUYWdPcklkZW50aWZpZXJDb250ZXh0KTogKFBhcnRpYWw8SWRlbnRpZmllck5vZGU+IHwgUGFydGlhbDxPcHRpb25hbElkZW50aWZpZXJOb2RlPikgPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuaWRlbnRpZmllcigpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5vcHRpb25hbFRhZ0lkZW50aWZpZXIoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52aXNpdE9wdGlvbmFsVGFnSWRlbnRpZmVyKGNvbnRleHQub3B0aW9uYWxUYWdJZGVudGlmaWVyKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHZpc2l0SWRlbnRpZmllciA9IChjb250ZXh0OiBQYXJzZXIuSWRlbnRpZmllckNvbnRleHQsIG9wdGlvbmFsID0gZmFsc2UpOiBQYXJ0aWFsPElkZW50aWZpZXJOb2RlPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dC5JRCgpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVJZGVudGlmaWVyTm9kZShjb250ZXh0LklEKCkudGV4dCwgb3B0aW9uYWwsIFtdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIFR5cGUgdmlzaXRvciAqL1xyXG5cclxuICB2aXNpdFR5cGUgPSAoY29udGV4dDogUGFyc2VyLlR5cGVDb250ZXh0IHwgUGFyc2VyLk5vdEFycmF5VHlwZUNvbnRleHQsIG9wdGlvbmFsID0gZmFsc2UpOiBQYXJ0aWFsPFR5cGVOb2RlPiA9PiB7XHJcblxyXG4gICAgLy8gSW50ZXJzZWN0aW9uc1xyXG4gICAgaWYgKGNvbnRleHQuUElQRSgpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICBjcmVhdGVJbnRlcnNlY3RUeXBlTm9kZShcclxuICAgICAgICAgIHRoaXMudmlzaXRUeXBlKGNvbnRleHQgaW5zdGFuY2VvZiBQYXJzZXIuVHlwZUNvbnRleHQgPyBjb250ZXh0LnR5cGUoMCkgOiBjb250ZXh0Lm5vdEFycmF5VHlwZSgwKSksXHJcbiAgICAgICAgICB0aGlzLnZpc2l0VHlwZShjb250ZXh0IGluc3RhbmNlb2YgUGFyc2VyLlR5cGVDb250ZXh0ID8gY29udGV4dC50eXBlKDEpIDogY29udGV4dC5ub3RBcnJheVR5cGUoMSkpLFxyXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LkFNUCgpKSB7IC8vIFVuaW9uc1xyXG4gICAgICByZXR1cm4gY3JlYXRlVHlwZU5vZGUoXHJcbiAgICAgICAgY3JlYXRlVW5pb25UeXBlTm9kZShcclxuICAgICAgICAgIHRoaXMudmlzaXRUeXBlKGNvbnRleHQgaW5zdGFuY2VvZiBQYXJzZXIuVHlwZUNvbnRleHQgPyBjb250ZXh0LnR5cGUoMCkgOiBjb250ZXh0Lm5vdEFycmF5VHlwZSgwKSksXHJcbiAgICAgICAgICB0aGlzLnZpc2l0VHlwZShjb250ZXh0IGluc3RhbmNlb2YgUGFyc2VyLlR5cGVDb250ZXh0ID8gY29udGV4dC50eXBlKDEpIDogY29udGV4dC5ub3RBcnJheVR5cGUoMSkpLFxyXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmxhbWJkYVR5cGUoKSkgeyAvLyBMYW1iZGEgZnVuY3Rpb25zIGkuZS4gKGlkKSA9PiB0eXBlXHJcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0TGFtYmRhVHlwZShjb250ZXh0LmxhbWJkYVR5cGUoKSksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnR1cGxlVHlwZSgpKSB7IC8vIGlkPHR5cGUsIHR5cGU+XHJcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0VHVwbGUoY29udGV4dC50dXBsZVR5cGUoKSksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnByaW1hcnlUeXBlKCkpIHsgLy8gUHJpbWFyeVxyXG4gICAgICByZXR1cm4gY3JlYXRlVHlwZU5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdFByaW1hcnlUeXBlKGNvbnRleHQucHJpbWFyeVR5cGUoKSksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnBhcmVudGhlc2l6ZWRUeXBlKCkpIHsgLy8gKGV4cHJlc3Npb24pXHJcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0UGFyZW50aGVzaXplZFR5cGUoY29udGV4dC5wYXJlbnRoZXNpemVkVHlwZSgpLCBvcHRpb25hbCksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQudW5hcnlUeXBlKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVOb2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRVbmFyeVR5cGUoY29udGV4dC51bmFyeVR5cGUoKSksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0Lm9iamVjdFR5cGUoKSkgeyAvLyB7IC4uLiB9XHJcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0T2JqZWN0VHlwZShjb250ZXh0Lm9iamVjdFR5cGUoKSksXHJcbiAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0IGluc3RhbmNlb2YgUGFyc2VyLlR5cGVDb250ZXh0ICYmIGNvbnRleHQuYXJyYXlUeXBlKCkpIHsgLy8gWyAuLi4gXVxyXG4gICAgICByZXR1cm4gY3JlYXRlVHlwZU5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdEFycmF5VHlwZShjb250ZXh0LmFycmF5VHlwZSgpKSxcclxuICAgICAgICBvcHRpb25hbCxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBMYW1iZGEgdmlzaXRvciAqL1xyXG5cclxuICB2aXNpdExhbWJkYVR5cGUgPSAoY29udGV4dDogUGFyc2VyLkxhbWJkYVR5cGVDb250ZXh0KTogUGFydGlhbDxMYW1iZGFUeXBlTm9kZT4gPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuZm9ybWFsUGFyYW1ldGVyU2VxdWVuY2UoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlTGFtYmRhVHlwZU5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdExhbWJkYUZvcm1hbFBhcmFtZXRlclNlcXVlbmNlKGNvbnRleHQuZm9ybWFsUGFyYW1ldGVyU2VxdWVuY2UoKSksXHJcbiAgICAgICAgdGhpcy52aXNpdFR5cGUoY29udGV4dC50eXBlKCksICEhY29udGV4dC5RVUVTVElPTigpKSxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICAgICk7XHJcblxyXG4gICAgfSBlbHNlIGlmIChjb250ZXh0LnBhcmFtZXRlcigpKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVMYW1iZGFUeXBlTm9kZShcclxuICAgICAgICB0aGlzLnZpc2l0TGFtYmRhRm9ybWFsUGFyYW1ldGVyU2VxdWVuY2UoY29udGV4dC5wYXJhbWV0ZXIoKSksXHJcbiAgICAgICAgdGhpcy52aXNpdFR5cGUoY29udGV4dC50eXBlKCksICEhY29udGV4dC5RVUVTVElPTigpKSxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZUxhbWJkYVR5cGVOb2RlKFxyXG4gICAgICBudWxsLFxyXG4gICAgICB0aGlzLnZpc2l0VHlwZShjb250ZXh0LnR5cGUoKSwgISFjb250ZXh0LlFVRVNUSU9OKCkpLFxyXG4gICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICB2aXNpdExhbWJkYUZvcm1hbFBhcmFtZXRlclNlcXVlbmNlID0gKGNvbnRleHQ6IFBhcnNlci5Gb3JtYWxQYXJhbWV0ZXJTZXF1ZW5jZUNvbnRleHQgfCBQYXJzZXIuUGFyYW1ldGVyQ29udGV4dCk6IFBhcnRpYWw8Rm9ybWFsUGFyYW1ldGVyU2VxdWVuY2VOb2RlPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dCBpbnN0YW5jZW9mIFBhcnNlci5QYXJhbWV0ZXJDb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVGb3JtYWxQYXJlbWV0ZXJTZXF1ZW5jZU5vZGUoW3RoaXMudmlzaXRQYXJhbWV0ZXIoY29udGV4dCldKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZUZvcm1hbFBhcmVtZXRlclNlcXVlbmNlTm9kZSh0aGlzLnZpc2l0UGFyYW1ldGVycyhjb250ZXh0LnBhcmFtZXRlcigpKSwgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZClcclxuICB9XHJcblxyXG4gIHZpc2l0UGFyYW1ldGVycyA9IChjb250ZXh0czogUGFyc2VyLlBhcmFtZXRlckNvbnRleHRbXSk6IFBhcnRpYWw8UGFyYW1ldGVyTm9kZT5bXSA9PiB7XHJcbiAgICByZXR1cm4gY29udGV4dHMubWFwKGNvbnRleHQgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy52aXNpdFBhcmFtZXRlcihjb250ZXh0KTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICB2aXNpdFBhcmFtZXRlciA9IChjb250ZXh0OiBQYXJzZXIuUGFyYW1ldGVyQ29udGV4dCk6IFBhcnRpYWw8UGFyYW1ldGVyTm9kZT4gPT4ge1xyXG4gICAgbGV0IGlkZW50aWZpZXIgPSB0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSk7XHJcbiAgICBsZXQgdHlwZTogVHlwZU5vZGVcclxuICAgIGlmIChjb250ZXh0LnR5cGUoKSkge1xyXG4gICAgICB0eXBlID0gdGhpcy52aXNpdFR5cGUoY29udGV4dC50eXBlKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVBhcmFtZXRlck5vZGUoaWRlbnRpZmllciwgdHlwZSwgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICB2aXNpdFR1cGxlID0gKGNvbnRleHQ6IFBhcnNlci5UdXBsZVR5cGVDb250ZXh0KTogUGFydGlhbDxUdXBsZVR5cGVOb2RlPiA9PiB7XHJcbiAgICBsZXQgaWRlbnRpZmllcjogUGFydGlhbDxJZGVudGlmaWVyTm9kZT5cclxuICAgIGxldCB0eXBlczogUGFydGlhbDxUeXBlTm9kZT5bXVxyXG4gICAgaWYgKGNvbnRleHQuaWRlbnRpZmllcigpKSB7XHJcbiAgICAgIGlkZW50aWZpZXIgPSB0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQudHVwbGVUeXBlU2VxdWVuY2UoKSkge1xyXG4gICAgICB0eXBlcyA9IHRoaXMudmlzaXRUdXBsZVNlcXVlbmNlT3JFeHRlbmRlZFR5cGVzKGNvbnRleHQudHVwbGVUeXBlU2VxdWVuY2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZVR1cGxlVHlwZU5vZGUoaWRlbnRpZmllciwgdHlwZXMsIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRUdXBsZVNlcXVlbmNlT3JFeHRlbmRlZFR5cGVzID0gKGNvbnRleHQ6IFBhcnNlci5UdXBsZVR5cGVTZXF1ZW5jZUNvbnRleHQpOiBQYXJ0aWFsPFR5cGVOb2RlIHwgVHVwbGVFeHRlbmRlZFR5cGVOb2RlPltdIHwgdW5kZWZpbmVkW10gPT4ge1xyXG4gICAgbGV0IHR5cGVzID0gW107XHJcblxyXG4gICAgY29uc3QgbWVyZ2VTZXF1ZW5jZSA9ICgpID0+IHtcclxuICAgICAgdHlwZXMgPSBbXHJcbiAgICAgICAgLi4udHlwZXMsIFxyXG4gICAgICAgIC4uLl8uZmxhdHRlbkRlZXAoXHJcbiAgICAgICAgICBjb250ZXh0LnR1cGxlVHlwZVNlcXVlbmNlKCkubWFwKHRoaXMudmlzaXRUdXBsZVNlcXVlbmNlT3JFeHRlbmRlZFR5cGVzLmJpbmQodGhpcykpKVxyXG4gICAgICBdXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuRVhURU5EUygpKSB7XHJcbiAgICAgIHR5cGVzLnB1c2goY3JlYXRlVHVwbGVFeHRlbmRlZFR5cGVOb2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRQcmltYXJ5VHlwZShjb250ZXh0LnByaW1hcnlUeXBlKDApKSxcclxuICAgICAgICB0aGlzLnZpc2l0UHJpbWFyeVR5cGUoY29udGV4dC5wcmltYXJ5VHlwZSgxKSksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApKTtcclxuXHJcbiAgICAgIGlmIChjb250ZXh0LnR1cGxlVHlwZVNlcXVlbmNlKCkpIHtcclxuICAgICAgICBtZXJnZVNlcXVlbmNlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0eXBlcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5QSVBFKCkpIHtcclxuICAgICAgdHlwZXMucHVzaChjcmVhdGVJbnRlcnNlY3RUeXBlTm9kZShcclxuICAgICAgICBjcmVhdGVUeXBlTm9kZShcclxuICAgICAgICAgIHRoaXMudmlzaXRQcmltYXJ5VHlwZShjb250ZXh0LnByaW1hcnlUeXBlKDApKVxyXG4gICAgICAgICksXHJcbiAgICAgICAgY3JlYXRlVHlwZU5vZGUoXHJcbiAgICAgICAgICB0aGlzLnZpc2l0UHJpbWFyeVR5cGUoY29udGV4dC5wcmltYXJ5VHlwZSgxKSlcclxuICAgICAgICApLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKSk7XHJcblxyXG4gICAgICBpZiAoY29udGV4dC50dXBsZVR5cGVTZXF1ZW5jZSgpKSB7XHJcbiAgICAgICAgbWVyZ2VTZXF1ZW5jZSgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0eXBlcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5BTVAoKSkge1xyXG4gICAgICB0eXBlcy5wdXNoKGNyZWF0ZVVuaW9uVHlwZU5vZGUoXHJcbiAgICAgICAgY3JlYXRlVHlwZU5vZGUoXHJcbiAgICAgICAgICB0aGlzLnZpc2l0UHJpbWFyeVR5cGUoY29udGV4dC5wcmltYXJ5VHlwZSgwKSlcclxuICAgICAgICApLFxyXG4gICAgICAgIGNyZWF0ZVR5cGVOb2RlKFxyXG4gICAgICAgICAgdGhpcy52aXNpdFByaW1hcnlUeXBlKGNvbnRleHQucHJpbWFyeVR5cGUoMSkpXHJcbiAgICAgICAgKSxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICAgICkpO1xyXG5cclxuICAgICAgaWYgKGNvbnRleHQudHVwbGVUeXBlU2VxdWVuY2UoKSkge1xyXG4gICAgICAgIG1lcmdlU2VxdWVuY2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHR5cGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnByaW1hcnlUeXBlKCkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHR5cGVzID0gY29udGV4dC5wcmltYXJ5VHlwZSgpXHJcbiAgICAgICAgLm1hcChwcmltYXJ5ID0+IGNyZWF0ZVR5cGVOb2RlKHRoaXMudmlzaXRQcmltYXJ5VHlwZShwcmltYXJ5KSkpXHJcblxyXG4gICAgICBpZiAoY29udGV4dC50dXBsZVR5cGVTZXF1ZW5jZSgpKSB7XHJcbiAgICAgICAgbWVyZ2VTZXF1ZW5jZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0eXBlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZpc2l0UHJpbWFyeVR5cGUgPSAoY29udGV4dDogUGFyc2VyLlByaW1hcnlUeXBlQ29udGV4dCk6IFBhcnRpYWw8UHJpbWFyeVR5cGVOb2RlPiA9PiB7XHJcblxyXG4gICAgbGV0IHByaW1hcnk6IFBhcnRpYWw8SWRlbnRpZmllck5vZGU+IHwgUGFydGlhbDxLZXl3b3JkTm9kZT4gfCBQYXJ0aWFsPFByb3BlcnR5SWRlbnRpZmllck5vZGU+O1xyXG5cclxuICAgIGlmIChjb250ZXh0Lm9wdGlvbmFsSWRlbnRpZmllcigpKSB7XHJcbiAgICAgIHByaW1hcnkgPSB0aGlzLnZpc2l0T3B0aW9uYWxJZGVudGlmaWVyKGNvbnRleHQub3B0aW9uYWxJZGVudGlmaWVyKCkpO1xyXG4gICAgfSBlbHNlIGlmIChjb250ZXh0LmlkZW50aWZpZXJPcktleXdvcmQoKSkge1xyXG4gICAgICBwcmltYXJ5ID0gdGhpcy52aXNpdElkZW50aWZpZXJPcktleXdvcmQoY29udGV4dC5pZGVudGlmaWVyT3JLZXl3b3JkKCkpXHJcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQucHJvcGVydHlJZGVudGlmaWVyKCkpIHtcclxuICAgICAgcHJpbWFyeSA9IHRoaXMudmlzaXRQcm9wZXJ0eUlkZW50aWZpZXIoY29udGV4dC5wcm9wZXJ0eUlkZW50aWZpZXIoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlUHJpbWFyeVR5cGVOb2RlKHByaW1hcnksIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRJZGVudGlmaWVyT3JLZXl3b3JkID0gKGNvbnRleHQ6IFBhcnNlci5JZGVudGlmaWVyT3JLZXl3b3JkQ29udGV4dCk6IFBhcnRpYWw8KElkZW50aWZpZXJOb2RlIHwgS2V5d29yZE5vZGUpPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dC5pZGVudGlmaWVyKCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlzaXRJZGVudGlmaWVyKGNvbnRleHQuaWRlbnRpZmllcigpKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmtleXdvcmQoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52aXNpdEtleXdvcmQoY29udGV4dC5rZXl3b3JkKCkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2aXNpdEtleXdvcmQgPSAoY29udGV4dDogUGFyc2VyLktleXdvcmRDb250ZXh0KTogS2V5d29yZE5vZGUgPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuTnVsbExpdGVyYWwoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlS2V5d29yZE5vZGUoY29udGV4dC5OdWxsTGl0ZXJhbCgpLnRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRQYXJlbnRoZXNpemVkVHlwZSA9IChjb250ZXh0OiBQYXJzZXIuUGFyZW50aGVzaXplZFR5cGVDb250ZXh0LCBvcHRpb25hbCA9IGZhbHNlKTogUGFydGlhbDxQYXJlbnRoZXNpemVkVHlwZU5vZGU+ID0+IHtcclxuICAgIGlmIChjb250ZXh0LnR5cGUoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlUGFyZW50aGVzaXplZFR5cGVOb2RlKHRoaXMudmlzaXRUeXBlKGNvbnRleHQudHlwZSgpKSwgb3B0aW9uYWwsIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRVbmFyeVR5cGUgPSAoY29udGV4dDogUGFyc2VyLlVuYXJ5VHlwZUNvbnRleHQpOiBQYXJ0aWFsPFVuYXJ5VHlwZU5vZGU+ID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVVbmFyeVR5cGVOb2RlKFxyXG4gICAgICAoY29udGV4dC5BTVAoKSB8fCBjb250ZXh0LlNUQVIoKSkudGV4dCxcclxuICAgICAgdGhpcy52aXNpdFByaW1hcnlUeXBlKGNvbnRleHQucHJpbWFyeVR5cGUoKSksXHJcbiAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB2aXNpdE9iamVjdFR5cGUgPSAoY29udGV4dDogUGFyc2VyLk9iamVjdFR5cGVDb250ZXh0KTogUGFydGlhbDxPYmplY3RUeXBlTm9kZT4gPT4ge1xyXG4gICAgcmV0dXJuIGNyZWF0ZU9iamVjdFR5cGVOb2RlKHRoaXMudmlzaXRPYmplY3RQYWlyU2VxdWVuY2VUeXBlKGNvbnRleHQub2JqZWN0UGFpclNlcXVlbmNlVHlwZSgpKSwgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICB2aXNpdE9iamVjdFBhaXJTZXF1ZW5jZVR5cGUgPSAoY29udGV4dDogUGFyc2VyLk9iamVjdFBhaXJTZXF1ZW5jZVR5cGVDb250ZXh0KSA9PiB7XHJcbiAgICByZXR1cm4gKGNvbnRleHQgPyBjb250ZXh0Lm9iamVjdFBhaXJUeXBlKCkgOiBbXSkubWFwKHBhaXIgPT4ge1xyXG4gICAgICByZXR1cm4gY3JlYXRlT2JqZWN0UGFpclR5cGVOb2RlKHRoaXMudmlzaXRUeXBlKHBhaXIudHlwZSgwKSksIHRoaXMudmlzaXRUeXBlKHBhaXIudHlwZSgxKSksIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBwYWlyLnRleHQgOiB1bmRlZmluZWQpXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZpc2l0QXJyYXlUeXBlID0gKGNvbnRleHQ6IFBhcnNlci5BcnJheVR5cGVDb250ZXh0KTogUGFydGlhbDxBcnJheVR5cGVOb2RlPiA9PiB7XHJcblxyXG4gICAgaWYgKGNvbnRleHQubm90QXJyYXlUeXBlKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUFycmF5VHlwZU5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdFR5cGUoY29udGV4dC5ub3RBcnJheVR5cGUoKSksXHJcbiAgICAgICAgKGNvbnRleHQudHlwZSgpIHx8IFtdKS5tYXAodHlwZSA9PiB0aGlzLnZpc2l0VHlwZSh0eXBlKSksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZUFycmF5VHlwZU5vZGUoXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIChjb250ZXh0LnR5cGUoKSB8fCBbXSkubWFwKHR5cGUgPT4gdGhpcy52aXNpdFR5cGUodHlwZSkpLFxyXG4gICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICB2aXNpdFByb3BlcnR5SWRlbnRpZmllciA9IChjb250ZXh0OiBQYXJzZXIuUHJvcGVydHlJZGVudGlmaWVyQ29udGV4dCk6IFBhcnRpYWw8UHJvcGVydHlJZGVudGlmaWVyTm9kZT4gPT4ge1xyXG5cclxuICAgIC8vIEFzc3VtZSAnY29udGV4dCcgaXMgZGVmaW5lZC5cclxuICAgIGxldCBpZGVudGlmaWVyID0gY29udGV4dC5pZGVudGlmaWVyKCkgP1xyXG4gICAgICB0aGlzLnZpc2l0SWRlbnRpZmllcihjb250ZXh0LmlkZW50aWZpZXIoKSkgOlxyXG4gICAgICB0aGlzLnZpc2l0T3B0aW9uYWxJZGVudGlmaWVyKGNvbnRleHQub3B0aW9uYWxJZGVudGlmaWVyKCkpO1xyXG4gICAgLy8gQSBwcm9wZXJ0eSBtdXN0IGV4aXN0IHNpbmNlIGJ5IGdyYW1tYXI6XHJcbiAgICAvLyAob3B0aW9uYWxJZGVudGlmaWVyIHwgaWRlbnRpZmllcikgKCcuJyBvcHRpb25hbElkZW50aWZpZXJPcklkZW50aWZpZXIpK1xyXG4gICAgbGV0IHByb3BlcnR5ID0gY29udGV4dC5vcHRpb25hbElkZW50aWZpZXJPcklkZW50aWZpZXIoKVxyXG4gICAgICAubWFwKHRoaXMudmlzaXRPcHRpb25hbElkZW50aWZpZXJPcklkZW50aWZpZXIpO1xyXG4gICAgLy8gQWRkIHRoZSBpZGVudGlmaWVyIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAgICBwcm9wZXJ0eS51bnNoaWZ0KGlkZW50aWZpZXIpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5SWRlbnRpZmllck5vZGUocHJvcGVydHksIGNvbnRleHQudGV4dClcclxuICB9XHJcblxyXG4gIHZpc2l0T3B0aW9uYWxJZGVudGlmaWVyID0gKGNvbnRleHQ6IFBhcnNlci5PcHRpb25hbElkZW50aWZpZXJDb250ZXh0KTogUGFydGlhbDxPcHRpb25hbElkZW50aWZpZXJOb2RlPiA9PiB7XHJcbiAgICBpZiAoY29udGV4dC5pZGVudGlmaWVyKCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlzaXRJZGVudGlmaWVyKGNvbnRleHQuaWRlbnRpZmllcigpLCAhIWNvbnRleHQuUVVFU1RJT04oKSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZpc2l0T3B0aW9uYWxJZGVudGlmaWVyT3JJZGVudGlmaWVyID0gKGNvbnRleHQ6IFBhcnNlci5PcHRpb25hbElkZW50aWZpZXJPcklkZW50aWZpZXJDb250ZXh0KTogUGFydGlhbDxPcHRpb25hbElkZW50aWZpZXJOb2RlPiB8IFBhcnRpYWw8SWRlbnRpZmllck5vZGU+ID0+IHtcclxuICAgIGlmIChjb250ZXh0LmlkZW50aWZpZXIoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52aXNpdElkZW50aWZpZXIoY29udGV4dC5pZGVudGlmaWVyKCkpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQub3B0aW9uYWxJZGVudGlmaWVyKCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlzaXRPcHRpb25hbElkZW50aWZpZXIoY29udGV4dC5vcHRpb25hbElkZW50aWZpZXIoKSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIEV4cHJlc3Npb24gdmlzaXRvciAqL1xyXG5cclxuICB2aXNpdEV4cHJlc3Npb24gPSAoY29udGV4dDogUGFyc2VyLkV4cHJlc3Npb25Db250ZXh0KTogUGFydGlhbDxFeHByZXNzaW9uTm9kZT4gPT4ge1xyXG4gICAgaWYgKGNvbnRleHQudW5hcnlFeHByZXNzaW9uKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRVbmFyeUV4cHJlc3Npb24oY29udGV4dC51bmFyeUV4cHJlc3Npb24oKSksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuZXhwcmVzc2lvbigpLmxlbmd0aCA+IDEpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIGNyZWF0ZUJpbmFyeUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgICAgKGNvbnRleHQuUExVUygpIHx8IGNvbnRleHQuTUlOVVMoKSB8fCBjb250ZXh0LlNUQVIoKSB8fCBjb250ZXh0LkZPUldBUkRfU0xBU0goKSkudGV4dCxcclxuICAgICAgICAgIHRoaXMudmlzaXRFeHByZXNzaW9uKGNvbnRleHQuZXhwcmVzc2lvbigwKSksXHJcbiAgICAgICAgICB0aGlzLnZpc2l0RXhwcmVzc2lvbihjb250ZXh0LmV4cHJlc3Npb24oMSkpLFxyXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuYXJyYXlFeHByZXNzaW9uKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIGNyZWF0ZUFycmF5RXhwcmVzc2lvbk5vZGUoXHJcbiAgICAgICAgICB0aGlzLnZpc2l0QXJyYXlFeHByZXNzaW9uKGNvbnRleHQuYXJyYXlFeHByZXNzaW9uKCkpLFxyXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQuYXJyYXlFeHByZXNzaW9uKCkudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICksXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0Lm9iamVjdEV4cHJlc3Npb24oKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlRXhwcmVzc2lvbk5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdE9iamVjdEV4cHJlc3Npb24oY29udGV4dC5vYmplY3RFeHByZXNzaW9uKCkpLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmxhbWJkYUV4cHJlc3Npb24oKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlRXhwcmVzc2lvbk5vZGUoXHJcbiAgICAgICAgdGhpcy52aXNpdExhbWJkYUV4cHJlc3Npb24oY29udGV4dC5sYW1iZGFFeHByZXNzaW9uKCkpLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmxpdGVyYWxFeHByZXNzaW9uKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRMaXRlcmFsRXhwcmVzc2lvbihjb250ZXh0LmxpdGVyYWxFeHByZXNzaW9uKCkpLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LnBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihjb250ZXh0LnBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKCkpLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRVbmFyeUV4cHJlc3Npb24gPSAoY29udGV4dDogUGFyc2VyLlVuYXJ5RXhwcmVzc2lvbkNvbnRleHQpOiBQYXJ0aWFsPFVuYXJ5RXhwcmVzc2lvbk5vZGU+ID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVVbmFyeUV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAoY29udGV4dC5QTFVTKCkgfHwgY29udGV4dC5NSU5VUygpKS50ZXh0LFxyXG4gICAgICB0aGlzLnZpc2l0RXhwcmVzc2lvbihjb250ZXh0LmV4cHJlc3Npb24oKSksXHJcbiAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgIClcclxuICB9XHJcblxyXG4gIHZpc2l0QXJyYXlFeHByZXNzaW9uID0gKGNvbnRleHQ6IFBhcnNlci5BcnJheUV4cHJlc3Npb25Db250ZXh0KTogUGFydGlhbDxFeHByZXNzaW9uTm9kZT5bXSA9PiB7XHJcbiAgICByZXR1cm4gKGNvbnRleHQgPyBjb250ZXh0LmV4cHJlc3Npb24oKSA6IFtdKS5tYXAoZXhwcmVzc2lvbiA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc2l0RXhwcmVzc2lvbihleHByZXNzaW9uKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZpc2l0T2JqZWN0RXhwcmVzc2lvbiA9IChjb250ZXh0OiBQYXJzZXIuT2JqZWN0RXhwcmVzc2lvbkNvbnRleHQpOiBQYXJ0aWFsPE9iamVjdEV4cHJlc3Npb25Ob2RlPiA9PiB7XHJcbiAgICByZXR1cm4gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbk5vZGUoXHJcbiAgICAgIHRoaXMudmlzaXRPYmplY3RQYWlyU2VxdWVuY2VFeHByZXNzaW9uKGNvbnRleHQub2JqZWN0UGFpclNlcXVlbmNlRXhwcmVzc2lvbigpKSxcclxuICAgICAgdGhpcy5vcHRpb25zLnNob3dOb2RlVGV4dCA/IGNvbnRleHQudGV4dCA6IHVuZGVmaW5lZFxyXG4gICAgKVxyXG4gIH1cclxuXHJcblxyXG4gIHZpc2l0T2JqZWN0UGFpclNlcXVlbmNlRXhwcmVzc2lvbiA9IChjb250ZXh0OiBQYXJzZXIuT2JqZWN0UGFpclNlcXVlbmNlRXhwcmVzc2lvbkNvbnRleHQpOiBQYXJ0aWFsPE9iamVjdFBhaXJFeHByZXNzaW9uTm9kZT5bXSA9PiB7XHJcbiAgICByZXR1cm4gKGNvbnRleHQgPyBjb250ZXh0Lm9iamVjdFBhaXJFeHByZXNzaW9uKCkgOiBbXSkubWFwKHBhaXIgPT4ge1xyXG4gICAgICByZXR1cm4gY3JlYXRlT2JqZWN0UGFpckV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgIHRoaXMudmlzaXRMaXRlcmFsRXhwcmVzc2lvbihwYWlyLmxpdGVyYWxFeHByZXNzaW9uKDApKSxcclxuICAgICAgICBwYWlyLm9iamVjdEV4cHJlc3Npb24oKSA/XHJcbiAgICAgICAgICB0aGlzLnZpc2l0T2JqZWN0RXhwcmVzc2lvbihwYWlyLm9iamVjdEV4cHJlc3Npb24oKSkgOlxyXG4gICAgICAgICAgdGhpcy52aXNpdExpdGVyYWxFeHByZXNzaW9uKHBhaXIubGl0ZXJhbEV4cHJlc3Npb24oMSkpLFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93Tm9kZVRleHQgPyBjb250ZXh0LnRleHQgOiB1bmRlZmluZWRcclxuICAgICAgKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2aXNpdExhbWJkYUV4cHJlc3Npb24gPSAoY29udGV4dDogUGFyc2VyLkxhbWJkYUV4cHJlc3Npb25Db250ZXh0KTogUGFydGlhbDxMYW1iZGFFeHByZXNzaW9uTm9kZT4gPT4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmlzaXRMYW1iZGFUeXBlKGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiA9IChjb250ZXh0OiBQYXJzZXIuUGFyZW50aGVzaXplZEV4cHJlc3Npb25Db250ZXh0KTogUGFydGlhbDxQYXJlbnRoZXNpemVkRXhwcmVzc2lvbk5vZGU+ID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVQYXJlbnRoZXNpemVkRXhwcmVzc2lvbmVOb2RlKHRoaXMudmlzaXRFeHByZXNzaW9uKGNvbnRleHQuZXhwcmVzc2lvbigpKSk7XHJcbiAgfVxyXG5cclxuICB2aXNpdExpdGVyYWxFeHByZXNzaW9uID0gKGNvbnRleHQ6IFBhcnNlci5MaXRlcmFsRXhwcmVzc2lvbkNvbnRleHQpOiBQYXJ0aWFsPExpdGVyYWxFeHByZXNzaW9uTm9kZT4gPT4ge1xyXG4gICAgbGV0IG5vZGUgPSB7IGxpdGVyYWw6IHt9IH1cclxuICAgIGlmIChjb250ZXh0Lk51bWJlckxpdGVyYWwoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlTGl0ZXJhbEV4cHJlc3Npb25Ob2RlKFxyXG4gICAgICAgICdudW1iZXInLFxyXG4gICAgICAgIGNvbnRleHQuTnVtYmVyTGl0ZXJhbCgpLnRleHRcclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgaWYgKGNvbnRleHQuQm9vbGVhbkxpdGVyYWwoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlTGl0ZXJhbEV4cHJlc3Npb25Ob2RlKCdib29sZWFuJywgY29udGV4dC5Cb29sZWFuTGl0ZXJhbCgpLnRleHQpXHJcbiAgICB9XHJcbiAgICBpZiAoY29udGV4dC5DaGFyYWN0ZXJMaXRlcmFsKCkpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUxpdGVyYWxFeHByZXNzaW9uTm9kZSgnY2hhcmFjdGVyJywgY29udGV4dC5DaGFyYWN0ZXJMaXRlcmFsKCkudGV4dClcclxuICAgIH1cclxuICAgIGlmIChjb250ZXh0LlN0cmluZ0xpdGVyYWwoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlTGl0ZXJhbEV4cHJlc3Npb25Ob2RlKCdzdHJpbmcnLCBjb250ZXh0LlN0cmluZ0xpdGVyYWwoKS50ZXh0KVxyXG4gICAgfVxyXG4gICAgaWYgKGNvbnRleHQuTnVsbExpdGVyYWwoKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlTGl0ZXJhbEV4cHJlc3Npb25Ob2RlKCdudWxsJywgY29udGV4dC5OdWxsTGl0ZXJhbCgpLnRleHQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBEZXNjcmlwdGlvbiB2aXNpdG9yICovXHJcblxyXG4gIHZpc2l0RGVzY3JpcHRpb24gPSAoY29udGV4dDogUGFyc2VyLkRlc2NyaXB0aW9uQ29udGV4dCk6IFBhcnRpYWw8RGVzY3JpcHRpb25Ob2RlPiA9PiB7XHJcbiAgICByZXR1cm4gY3JlYXRlRGVzY3JpcHRpb25Ob2RlKFxyXG4gICAgICBjb250ZXh0LnRleHQsXHJcbiAgICAgIHRoaXMudmlzaXREZXNjcmlwdGlvbkxpbmUoY29udGV4dC5kZXNjcmlwdGlvbkxpbmUoKSlcclxuICAgIClcclxuICB9XHJcblxyXG4gIHZpc2l0RGVzY3JpcHRpb25MaW5lID0gKGNvbnRleHQ6IFBhcnNlci5EZXNjcmlwdGlvbkxpbmVDb250ZXh0KTogUGFydGlhbDxJbmxpbmVUYWdOb2RlPltdID0+IHtcclxuICAgIHJldHVybiB0aGlzLnZpc2l0RGVzY3JpcHRpb25MaW5lRWxlbWVudChjb250ZXh0LmRlc2NyaXB0aW9uTGluZUVsZW1lbnQoKSk7XHJcbiAgfVxyXG5cclxuICB2aXNpdERlc2NyaXB0aW9uTGluZUVsZW1lbnQgPSAoY29udGV4dDogUGFyc2VyLkRlc2NyaXB0aW9uTGluZUVsZW1lbnRDb250ZXh0W10pOiBQYXJ0aWFsPElubGluZVRhZ05vZGU+W10gPT4ge1xyXG4gICAgcmV0dXJuIChjb250ZXh0IHx8IFtdKS5tYXAoZWxlbWVudCA9PiB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50LmlubGluZVRhZygpID8gdGhpcy52aXNpdElubGluZVRhZyhlbGVtZW50LmlubGluZVRhZygpKSA6IHVuZGVmaW5lZFxyXG4gICAgfSkuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudCAhPT0gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIHZpc2l0SW5saW5lVGFnID0gKGNvbnRleHQ6IFBhcnNlci5JbmxpbmVUYWdDb250ZXh0KTogUGFydGlhbDxJbmxpbmVUYWdOb2RlPiA9PiB7XHJcbiAgICByZXR1cm4gY3JlYXRlSW5saW5lVGFnTm9kZShcclxuICAgICAgdGhpcy52aXNpdElkZW50aWZpZXIoY29udGV4dC5pbmxpbmVUYWdOYW1lKCkuaWRlbnRpZmllcigpKSxcclxuICAgICAgdGhpcy52aXNpdElubGluZVRhZ0JvZHkoY29udGV4dC5pbmxpbmVUYWdCb2R5KCkpLFxyXG4gICAgICB0aGlzLm9wdGlvbnMuc2hvd05vZGVUZXh0ID8gY29udGV4dC50ZXh0IDogdW5kZWZpbmVkXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRJbmxpbmVUYWdCb2R5ID0gKGNvbnRleHQ6IFBhcnNlci5JbmxpbmVUYWdCb2R5Q29udGV4dCk6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gY29udGV4dC5icmFjZUJvZHkoKS5tYXAoYm9keSA9PiBib2R5LnRleHQpLmpvaW4oJycpO1xyXG4gIH1cclxufSJdfQ==