"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
/* Documentation */
/**
 * Removes undefined, null, and false properties from an object.
 *
 * # API
 *
 * ```
 * @param object
 * ```
 */
function sanitize(object) {
    // Object.keys(object).forEach((key) => (object[key] == null) && delete object[key]);
    return _.pickBy(object);
}
/**
 * Creates a Documentation node.
 *
 * # API
 *
 * ```
 * @param body: BodyNode - The body node. See. {@link XDocASTNode.ts::BodyNode}
 * @param text?: string - The string representation of the body node.
 * @return DocumentationNode - See {@link XDocASTNode.ts::DocumentationNode}.
 * ```
 */
function createDocumentationNode(body, text) {
    return { documentation: sanitize({ body, text }) };
}
exports.createDocumentationNode = createDocumentationNode;
/**
 * Creates a Body node.
 */
function createBodyNode(annotations, text) {
    return sanitize({ annotations, text });
}
exports.createBodyNode = createBodyNode;
/* Tag */
function createTagNode(name, identifier, type, expression, description, text) {
    return sanitize(Object.assign({}, name, identifier, { type }, expression, description, text));
}
exports.createTagNode = createTagNode;
function createTagNameNode(name, text) {
    return sanitize({ name, text });
}
exports.createTagNameNode = createTagNameNode;
function createTagIdentifierNode(identifier, property, text) {
    let node = {};
    if (identifier)
        Object.assign(node, { identifier, text });
    else if (property)
        Object.assign(node, { property, text });
    return sanitize(node);
}
exports.createTagIdentifierNode = createTagIdentifierNode;
function createOptionalTagIdentifierNode(identifier) {
    return identifier;
}
exports.createOptionalTagIdentifierNode = createOptionalTagIdentifierNode;
function createPropertyTagIdentifierNode(property, text) {
    return sanitize({ property, text });
}
exports.createPropertyTagIdentifierNode = createPropertyTagIdentifierNode;
function createIdentifierNode(text, optional = false, property) {
    if (!optional)
        optional = false;
    if (!property)
        property = [];
    return { identifier: sanitize({ optional, property, text }) };
}
exports.createIdentifierNode = createIdentifierNode;
function createOptionalIdentifierNode(optional = true, property, text) {
    return createIdentifierNode(text, optional, property);
}
exports.createOptionalIdentifierNode = createOptionalIdentifierNode;
/* Type */
/**
 *
 * Creates a Type node.
 *
 * # API
 *
 * ```
 * @export
 * @function createTypeNode
 * @param type: UnionTypeNode
 * | LambdaTypeNode
 * | TupleTypeNode
 * | PrimaryTypeNode
 * | ParenthesizedTypeNode
 * | UnaryTypeNode
 * | ObjectTypeNode
 * | ArrayTypeNode
 * | PropertyTypeNode
 * - The type of node to create.
 * @param optional = false
 * - Determines whether the type of node is optional.
 * ```
 */
function createTypeNode(type, optional = false, text) {
    return Object.assign({}, type, sanitize({ optional, text }));
}
exports.createTypeNode = createTypeNode;
/**
 * Creates an IntersectionType node.
 *
 * # API
 *
 * ```
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createIntersectTypeNode(left, right, text) {
    return { intersect: sanitize({ left, right, text }) };
}
exports.createIntersectTypeNode = createIntersectTypeNode;
/**
 * Creates an UnionType node.
 *
 * # API
 *
 * ```
 * @export
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createUnionTypeNode(left, right, text) {
    return { union: sanitize({ left, right, text }) };
}
exports.createUnionTypeNode = createUnionTypeNode;
/**
 * Creates a LambdaType node.
 *
 * # API
 *
 * ```
 * - The single parameter in a lambda type.
 * @param parameters: FormalParameterSequencce | undefined[] | null
 * - The sequence of parameters in a lambda type.
 * @param type: TypeNode
 * - The return type in a lambda type.
 * ```
 */
function createLambdaTypeNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return { lambda: sanitize({ parameters, type, text }) };
}
exports.createLambdaTypeNode = createLambdaTypeNode;
function createFormalParemeterSequenceNode(parameters, text) {
    return { parameters, text };
}
exports.createFormalParemeterSequenceNode = createFormalParemeterSequenceNode;
function createParameterNode(identifier, type, text) {
    return sanitize({ identifier, type, text });
}
exports.createParameterNode = createParameterNode;
function createTupleTypeNode(identifier, types, text) {
    return sanitize({ identifier, types, text });
}
exports.createTupleTypeNode = createTupleTypeNode;
function createPrimaryTypeNode(primary, text) {
    return sanitize({ primary, text });
}
exports.createPrimaryTypeNode = createPrimaryTypeNode;
function createKeywordNode(text) {
    return { keyword: { text } };
}
exports.createKeywordNode = createKeywordNode;
function createParenthesizedTypeNode(type, optional = false, text) {
    return { parenthesized: sanitize({ type, optional, text }) };
}
exports.createParenthesizedTypeNode = createParenthesizedTypeNode;
function createUnaryTypeNode(operator, right, text) {
    return { unary: sanitize({ operator, right, text }) };
}
exports.createUnaryTypeNode = createUnaryTypeNode;
function createObjectTypeNode(object, text) {
    if (!object)
        object = [];
    return sanitize({ object, text });
}
exports.createObjectTypeNode = createObjectTypeNode;
function createObjectPairTypeNode(key, value, text) {
    return sanitize({ key, value, text });
}
exports.createObjectPairTypeNode = createObjectPairTypeNode;
function createArrayTypeNode(type, types, text) {
    if (!types)
        types = [];
    return { array: sanitize({ type, types, text }) };
}
exports.createArrayTypeNode = createArrayTypeNode;
function createPropertyIdentifierNode(property, text) {
    return createIdentifierNode(text, false, property);
}
exports.createPropertyIdentifierNode = createPropertyIdentifierNode;
;
/* Expression */
function createExpressionNode(expression, text) {
    return sanitize({ expression, text });
}
exports.createExpressionNode = createExpressionNode;
function createUnaryExpressionNode(operator, right, text) {
    return { unary: sanitize({ operator, right, text }) };
}
exports.createUnaryExpressionNode = createUnaryExpressionNode;
function createBinaryExpressionNode(operator, left, right, text) {
    return { binary: sanitize({ left, right, operator, text }) };
}
exports.createBinaryExpressionNode = createBinaryExpressionNode;
function createArrayExpressionNode(array, text) {
    if (!array)
        array = [];
    return sanitize({ array, text });
}
exports.createArrayExpressionNode = createArrayExpressionNode;
function createObjectExpressionNode(object, text) {
    if (!object)
        object = [];
    return sanitize({ object, text });
}
exports.createObjectExpressionNode = createObjectExpressionNode;
function createObjectPairExpressionNode(key, value, text) {
    return sanitize({ key, value, text });
}
exports.createObjectPairExpressionNode = createObjectPairExpressionNode;
function createLambdaExpressionNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return createLambdaTypeNode(parameters, type, text);
}
exports.createLambdaExpressionNode = createLambdaExpressionNode;
function createParenthesizedExpressioneNode(expression, optional = false, text) {
    return { parenthesized: sanitize({ expression, optional, text }) };
}
exports.createParenthesizedExpressioneNode = createParenthesizedExpressioneNode;
;
function createLiteralExpressionNode(type, text) {
    return { literal: sanitize({ type, text }) };
}
exports.createLiteralExpressionNode = createLiteralExpressionNode;
function createDescriptionNode(text, inlines) {
    if (!inlines)
        inlines = [];
    return { description: sanitize({ text, inlines }) };
}
exports.createDescriptionNode = createDescriptionNode;
function createInlineTagNode(identifier, body, text) {
    return sanitize({ identifier, body, text });
}
exports.createInlineTagNode = createInlineTagNode;
//# sourceMappingURL=data:application/json;base64,