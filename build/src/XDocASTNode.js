"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
/* Documentation */
/**
 * Removes undefined, null, and false properties from an object.
 *
 * # API
 *
 * ```
 * @param object
 * ```
 */
function sanitize(object) {
    // Object.keys(object).forEach((key) => (object[key] == null) && delete object[key]);
    return _.pickBy(object);
}
/**
 * Creates a Documentation node.
 *
 * # API
 *
 * ```
 * @param body: BodyNode - The body node. See. {@link XDocASTNode.ts::BodyNode}
 * @param text?: string - The string representation of the body node.
 * @return DocumentationNode - See {@link XDocASTNode.ts::DocumentationNode}.
 * ```
 */
function createDocumentationNode(body, text) {
    return { documentation: sanitize({ body, text }) };
}
exports.createDocumentationNode = createDocumentationNode;
/**
 * Creates a Body node.
 */
function createBodyNode(annotations, text) {
    return sanitize({ annotations, text });
}
exports.createBodyNode = createBodyNode;
/* Tag */
function createTagNode(name, identifier, type, expression, description, text) {
    return sanitize(Object.assign({}, name, identifier, { type }, expression, description, text));
}
exports.createTagNode = createTagNode;
function createTagNameNode(name, text) {
    return sanitize({ name, text });
}
exports.createTagNameNode = createTagNameNode;
function createTagIdentifierNode(identifier, property, text) {
    let node = {};
    if (identifier)
        Object.assign(node, { identifier, text });
    else if (property)
        Object.assign(node, { property, text });
    return sanitize(node);
}
exports.createTagIdentifierNode = createTagIdentifierNode;
function createOptionalTagIdentifierNode(identifier) {
    return identifier;
}
exports.createOptionalTagIdentifierNode = createOptionalTagIdentifierNode;
function createPropertyTagIdentifierNode(property, text) {
    return sanitize({ property, text });
}
exports.createPropertyTagIdentifierNode = createPropertyTagIdentifierNode;
function createIdentifierNode(text, optional = false, property) {
    if (!optional)
        optional = false;
    if (!property)
        property = [];
    return { identifier: sanitize({ optional, property, text }) };
}
exports.createIdentifierNode = createIdentifierNode;
function createOptionalIdentifierNode(optional = true, property, text) {
    return createIdentifierNode(text, optional, property);
}
exports.createOptionalIdentifierNode = createOptionalIdentifierNode;
/* Type */
/**
 *
 * Creates a Type node.
 *
 * # API
 *
 * ```
 * @export
 * @function createTypeNode
 * @param type: UnionTypeNode
 * | LambdaTypeNode
 * | TupleTypeNode
 * | PrimaryTypeNode
 * | ParenthesizedTypeNode
 * | UnaryTypeNode
 * | ObjectTypeNode
 * | ArrayTypeNode
 * | PropertyTypeNode
 * - The type of node to create.
 * @param optional = false
 * - Determines whether the type of node is optional.
 * ```
 */
function createTypeNode(type, optional = false, text) {
    return Object.assign({}, type, sanitize({ optional, text }));
}
exports.createTypeNode = createTypeNode;
/**
 * Creates an IntersectionType node.
 *
 * # API
 *
 * ```
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createIntersectTypeNode(left, right, text) {
    return { intersect: sanitize({ left, right, text }) };
}
exports.createIntersectTypeNode = createIntersectTypeNode;
/**
 * Creates an UnionType node.
 *
 * # API
 *
 * ```
 * @export
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createUnionTypeNode(left, right, text) {
    return { union: sanitize({ left, right, text }) };
}
exports.createUnionTypeNode = createUnionTypeNode;
/**
 * Creates a LambdaType node.
 *
 * # API
 *
 * ```
 * - The single parameter in a lambda type.
 * @param parameters: FormalParameterSequencce | undefined[] | null
 * - The sequence of parameters in a lambda type.
 * @param type: TypeNode
 * - The return type in a lambda type.
 * ```
 */
function createLambdaTypeNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return { lambda: sanitize({ parameters, type, text }) };
}
exports.createLambdaTypeNode = createLambdaTypeNode;
function createFormalParemeterSequenceNode(parameters, text) {
    return { parameters, text };
}
exports.createFormalParemeterSequenceNode = createFormalParemeterSequenceNode;
function createParameterNode(identifier, type, text) {
    return sanitize({ identifier, type, text });
}
exports.createParameterNode = createParameterNode;
function createTupleTypeNode(identifier, types, text) {
    return sanitize({ identifier, types, text });
}
exports.createTupleTypeNode = createTupleTypeNode;
function createPrimaryTypeNode(primary, text) {
    return sanitize({ primary, text });
}
exports.createPrimaryTypeNode = createPrimaryTypeNode;
function createKeywordNode(text) {
    return { keyword: { text } };
}
exports.createKeywordNode = createKeywordNode;
function createParenthesizedTypeNode(type, optional = false, text) {
    return { parenthesized: sanitize({ type, optional, text }) };
}
exports.createParenthesizedTypeNode = createParenthesizedTypeNode;
function createUnaryTypeNode(operator, right, text) {
    return { unary: sanitize({ operator, right, text }) };
}
exports.createUnaryTypeNode = createUnaryTypeNode;
function createObjectTypeNode(object, text) {
    if (!object)
        object = [];
    return sanitize({ object, text });
}
exports.createObjectTypeNode = createObjectTypeNode;
function createObjectPairTypeNode(key, value, text) {
    return sanitize({ key, value, text });
}
exports.createObjectPairTypeNode = createObjectPairTypeNode;
function createArrayTypeNode(type, types, text) {
    if (!types)
        types = [];
    return { array: sanitize({ type, types, text }) };
}
exports.createArrayTypeNode = createArrayTypeNode;
function createPropertyIdentifierNode(property, text) {
    return createIdentifierNode(text, false, property);
}
exports.createPropertyIdentifierNode = createPropertyIdentifierNode;
;
/* Expression */
function createExpressionNode(expression, text) {
    return sanitize({ expression, text });
}
exports.createExpressionNode = createExpressionNode;
function createUnaryExpressionNode(operator, right, text) {
    return { unary: sanitize({ operator, right, text }) };
}
exports.createUnaryExpressionNode = createUnaryExpressionNode;
function createBinaryExpressionNode(operator, left, right, text) {
    return { binary: sanitize({ left, right, operator, text }) };
}
exports.createBinaryExpressionNode = createBinaryExpressionNode;
function createArrayExpressionNode(array, text) {
    if (!array)
        array = [];
    return sanitize({ array, text });
}
exports.createArrayExpressionNode = createArrayExpressionNode;
function createObjectExpressionNode(object, text) {
    if (!object)
        object = [];
    return sanitize({ object, text });
}
exports.createObjectExpressionNode = createObjectExpressionNode;
function createObjectPairExpressionNode(key, value, text) {
    return sanitize({ key, value, text });
}
exports.createObjectPairExpressionNode = createObjectPairExpressionNode;
function createLambdaExpressionNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return createLambdaTypeNode(parameters, type, text);
}
exports.createLambdaExpressionNode = createLambdaExpressionNode;
function createParenthesizedExpressioneNode(expression, optional = false, text) {
    return { parenthesized: sanitize({ expression, optional, text }) };
}
exports.createParenthesizedExpressioneNode = createParenthesizedExpressioneNode;
;
function createLiteralExpressionNode(type, text) {
    return { literal: sanitize({ type, text }) };
}
exports.createLiteralExpressionNode = createLiteralExpressionNode;
function createDescriptionNode(text, inlines) {
    if (!inlines)
        inlines = [];
    return { description: sanitize({ text, inlines }) };
}
exports.createDescriptionNode = createDescriptionNode;
function createInlineTagNode(identifier, body, text) {
    return sanitize({ identifier, body, text });
}
exports.createInlineTagNode = createInlineTagNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWERvY0FTVE5vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvWERvY0FTVE5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBRW5COzs7Ozs7OztHQVFHO0FBQ0gsU0FBUyxRQUFRLENBQUMsTUFBTTtJQUN0QixxRkFBcUY7SUFDckYsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3pCLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQ3JDLElBQWMsRUFDZCxJQUFhO0lBRWIsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFBO0FBQ3BELENBQUM7QUFMRCwwREFLQztBQVNEOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYyxDQUM1QixXQUE0QixFQUM1QixJQUFhO0lBRWIsT0FBTyxRQUFRLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUN4QyxDQUFDO0FBTEQsd0NBS0M7QUFTRCxTQUFTO0FBRVQsU0FBZ0IsYUFBYSxDQUMzQixJQUFpQixFQUNqQixVQUE4QyxFQUM5QyxJQUFjLEVBQ2QsVUFBMEIsRUFDMUIsV0FBNEIsRUFDNUIsSUFBYTtJQUViLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDaEcsQ0FBQztBQVRELHNDQVNDO0FBV0QsU0FBZ0IsaUJBQWlCLENBQy9CLElBQW9CLEVBQ3BCLElBQWE7SUFFYixPQUFPLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ2pDLENBQUM7QUFMRCw4Q0FL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USxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRSxDQUFDO0FBTkQsZ0ZBTUM7QUFPQSxDQUFDO0FBR0YsU0FBZ0IsMkJBQTJCLENBQ3pDLElBQVksRUFDWixJQUFZO0lBRVosT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFBO0FBQzlDLENBQUM7QUFMRCxrRUFLQztBQVNELFNBQWdCLHFCQUFxQixDQUNuQyxJQUFZLEVBQ1osT0FBeUI7SUFFekIsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQzFCLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQUNyRCxDQUFDO0FBTkQsc0RBTUM7QUFTRCxTQUFnQixtQkFBbUIsQ0FDakMsVUFBMEIsRUFDMUIsSUFBWSxFQUNaLElBQWE7SUFFYixPQUFPLFFBQVEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUM3QyxDQUFDO0FBTkQsa0RBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbi8qIERvY3VtZW50YXRpb24gKi9cblxuLyoqXG4gKiBSZW1vdmVzIHVuZGVmaW5lZCwgbnVsbCwgYW5kIGZhbHNlIHByb3BlcnRpZXMgZnJvbSBhbiBvYmplY3QuXG4gKiBcbiAqICMgQVBJXG4gKiBcbiAqIGBgYFxuICogQHBhcmFtIG9iamVjdFxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplKG9iamVjdCkge1xuICAvLyBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goKGtleSkgPT4gKG9iamVjdFtrZXldID09IG51bGwpICYmIGRlbGV0ZSBvYmplY3Rba2V5XSk7XG4gIHJldHVybiBfLnBpY2tCeShvYmplY3QpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIERvY3VtZW50YXRpb24gbm9kZS5cbiAqIFxuICogIyBBUElcbiAqIFxuICogYGBgXG4gKiBAcGFyYW0gYm9keTogQm9keU5vZGUgLSBUaGUgYm9keSBub2RlLiBTZWUuIHtAbGluayBYRG9jQVNUTm9kZS50czo6Qm9keU5vZGV9XG4gKiBAcGFyYW0gdGV4dD86IHN0cmluZyAtIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJvZHkgbm9kZS5cbiAqIEByZXR1cm4gRG9jdW1lbnRhdGlvbk5vZGUgLSBTZWUge0BsaW5rIFhEb2NBU1ROb2RlLnRzOjpEb2N1bWVudGF0aW9uTm9kZX0uXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50YXRpb25Ob2RlKFxuICBib2R5OiBCb2R5Tm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogRG9jdW1lbnRhdGlvbk5vZGUge1xuICByZXR1cm4geyBkb2N1bWVudGF0aW9uOiBzYW5pdGl6ZSh7IGJvZHksIHRleHQgfSkgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50YXRpb25Ob2RlIHtcbiAgZG9jdW1lbnRhdGlvbjoge1xuICAgIGJvZHk6IEJvZHlOb2RlLFxuICAgIHRleHQ/OiBzdHJpbmdcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBCb2R5IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb2R5Tm9kZShcbiAgYW5ub3RhdGlvbnM6IEFubm90YXRpb25zTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogQm9keU5vZGUge1xuICByZXR1cm4gc2FuaXRpemUoeyBhbm5vdGF0aW9ucywgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJvZHlOb2RlIHtcbiAgYW5ub3RhdGlvbnM6IFRhZ05vZGVbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIEFubm90YXRpb25zTm9kZSA9IFRhZ05vZGVbXSB8IHVuZGVmaW5lZFtdO1xuXG4vKiBUYWcgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhZ05vZGUoXG4gIG5hbWU6IFRhZ05hbWVOb2RlLFxuICBpZGVudGlmaWVyOiBUYWdJZGVudGlmaWVyTm9kZSB8IElkZW50aWZpZXJOb2RlLFxuICB0eXBlOiBUeXBlTm9kZSxcbiAgZXhwcmVzc2lvbjogRXhwcmVzc2lvbk5vZGUsXG4gIGRlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbk5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IFRhZ05vZGUge1xuICByZXR1cm4gc2FuaXRpemUoT2JqZWN0LmFzc2lnbih7fSwgbmFtZSwgaWRlbnRpZmllciwgeyB0eXBlIH0sIGV4cHJlc3Npb24sIGRlc2NyaXB0aW9uLCB0ZXh0KSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnTm9kZSB7XG4gIG5hbWU/OiBUYWdOYW1lTm9kZSxcbiAgaWRlbnRpZmllcj86IFRhZ0lkZW50aWZpZXJOb2RlIHwgSWRlbnRpZmllck5vZGUsXG4gIHR5cGU/OiBUeXBlTm9kZSxcbiAgZXhwcmVzc2lvbj86IEV4cHJlc3Npb25Ob2RlLFxuICBkZXNjcmlwdGlvbj86IERlc2NyaXB0aW9uTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnTmFtZU5vZGUoXG4gIG5hbWU6IElkZW50aWZpZXJOb2RlLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBUYWdOYW1lTm9kZSB7XG4gIHJldHVybiBzYW5pdGl6ZSh7IG5hbWUsIHRleHQgfSlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYWdOYW1lTm9kZSB7XG4gIG5hbWU6IElkZW50aWZpZXJOb2RlLFxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZShcbiAgaWRlbnRpZmllcjogSWRlbnRpZmllck5vZGUgfCBPcHRpb25hbElkZW50aWZpZXJOb2RlIHwgdW5kZWZpbmVkLFxuICBwcm9wZXJ0eT86IFByb3BlcnR5VGFnSWRlbnRpZmllck5vZGUgfCB1bmRlZmluZWQsXG4gIHRleHQ/OiBzdHJpbmdcbik6IFRhZ0lkZW50aWZpZXJOb2RlIHtcbiAgbGV0IG5vZGUgPSB7fVxuICBpZiAoaWRlbnRpZmllcikgT2JqZWN0LmFzc2lnbihub2RlLCB7IGlkZW50aWZpZXIsIHRleHQgfSlcbiAgZWxzZSBpZiAocHJvcGVydHkpIE9iamVjdC5hc3NpZ24obm9kZSwgeyBwcm9wZXJ0eSwgdGV4dCB9KVxuICByZXR1cm4gc2FuaXRpemUobm9kZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnSWRlbnRpZmllck5vZGUge1xuICBpZGVudGlmaWVyPzogSWRlbnRpZmllck5vZGUgfCBPcHRpb25hbFRhZ0lkZW50aWZpZXJOb2RlXG4gIHByb3BlcnR5PzogUHJvcGVydHlUYWdJZGVudGlmaWVyTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3B0aW9uYWxUYWdJZGVudGlmaWVyTm9kZShcbiAgaWRlbnRpZmllcjogT3B0aW9uYWxUYWdJZGVudGlmaWVyTm9kZVxuKTogT3B0aW9uYWxJZGVudGlmaWVyTm9kZSB7XG4gIHJldHVybiBpZGVudGlmaWVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbmFsVGFnSWRlbnRpZmllck5vZGUgZXh0ZW5kcyBPcHRpb25hbElkZW50aWZpZXJOb2RlIHsgfVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9wZXJ0eVRhZ0lkZW50aWZpZXJOb2RlKFxuICBwcm9wZXJ0eTogKElkZW50aWZpZXJOb2RlIHwgT3B0aW9uYWxUYWdJZGVudGlmaWVyTm9kZSlbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBQcm9wZXJ0eVRhZ0lkZW50aWZpZXJOb2RlIHtcbiAgcmV0dXJuIHNhbml0aXplKHsgcHJvcGVydHksIHRleHQgfSlcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlUYWdJZGVudGlmaWVyTm9kZSB7XG4gIC8vIFNob3J0Y3V0IG9mIE9wdGlvbmFsVGFnT3JJZGVudGlmaWVyXG4gIHByb3BlcnR5OiAoSWRlbnRpZmllck5vZGUgfCBPcHRpb25hbFRhZ0lkZW50aWZpZXJOb2RlKVtdIHwgdW5kZWZpbmVkW10sXG4gIHRleHQ/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlkZW50aWZpZXJOb2RlKFxuICB0ZXh0OiBzdHJpbmcsXG4gIG9wdGlvbmFsID0gZmFsc2UsXG4gIHByb3BlcnR5PzogSWRlbnRpZmllck5vZGVbXSB8IHVuZGVmaW5lZFtdLFxuKTogSWRlbnRpZmllck5vZGUge1xuICBpZiAoIW9wdGlvbmFsKSBvcHRpb25hbCA9IGZhbHNlO1xuICBpZiAoIXByb3BlcnR5KSBwcm9wZXJ0eSA9IFtdXG5cbiAgcmV0dXJuIHsgaWRlbnRpZmllcjogc2FuaXRpemUoeyBvcHRpb25hbCwgcHJvcGVydHksIHRleHQgfSkgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aWZpZXJOb2RlIHtcbiAgaWRlbnRpZmllcjoge1xuICAgIG9wdGlvbmFsOiBib29sZWFuLFxuICAgIHByb3BlcnR5OiBJZGVudGlmaWVyTm9kZVtdIHwgdW5kZWZpbmVkW11cbiAgICB0ZXh0OiBzdHJpbmdcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3B0aW9uYWxJZGVudGlmaWVyTm9kZShcbiAgb3B0aW9uYWwgPSB0cnVlLFxuICBwcm9wZXJ0eTogSWRlbnRpZmllck5vZGVbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBPcHRpb25hbElkZW50aWZpZXJOb2RlIHtcbiAgcmV0dXJuIGNyZWF0ZUlkZW50aWZpZXJOb2RlKHRleHQsIG9wdGlvbmFsLCBwcm9wZXJ0eSwgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25hbElkZW50aWZpZXJOb2RlIGV4dGVuZHMgSWRlbnRpZmllck5vZGUgeyB9XG5cblxuLyogVHlwZSAqL1xuXG4vKipcbiAqIFxuICogQ3JlYXRlcyBhIFR5cGUgbm9kZS5cbiAqIFxuICogIyBBUElcbiAqIFxuICogYGBgXG4gKiBAZXhwb3J0XG4gKiBAZnVuY3Rpb24gY3JlYXRlVHlwZU5vZGVcbiAqIEBwYXJhbSB0eXBlOiBVbmlvblR5cGVOb2RlXG4gKiB8IExhbWJkYVR5cGVOb2RlXG4gKiB8IFR1cGxlVHlwZU5vZGVcbiAqIHwgUHJpbWFyeVR5cGVOb2RlXG4gKiB8IFBhcmVudGhlc2l6ZWRUeXBlTm9kZVxuICogfCBVbmFyeVR5cGVOb2RlXG4gKiB8IE9iamVjdFR5cGVOb2RlXG4gKiB8IEFycmF5VHlwZU5vZGVcbiAqIHwgUHJvcGVydHlUeXBlTm9kZVxuICogLSBUaGUgdHlwZSBvZiBub2RlIHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSBvcHRpb25hbCA9IGZhbHNlIFxuICogLSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHR5cGUgb2Ygbm9kZSBpcyBvcHRpb25hbC5cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHlwZU5vZGUoXG4gIHR5cGU6IEludGVyc2VjdFR5cGVOb2RlXG4gICAgfCBVbmlvblR5cGVOb2RlXG4gICAgfCBMYW1iZGFUeXBlTm9kZVxuICAgIHwgVHVwbGVUeXBlTm9kZVxuICAgIHwgUHJpbWFyeVR5cGVOb2RlXG4gICAgfCBQYXJlbnRoZXNpemVkVHlwZU5vZGVcbiAgICB8IFVuYXJ5VHlwZU5vZGVcbiAgICB8IE9iamVjdFR5cGVOb2RlXG4gICAgfCBBcnJheVR5cGVOb2RlXG4gICAgfCBQcm9wZXJ0eUlkZW50aWZpZXJOb2RlLFxuICBvcHRpb25hbCA9IGZhbHNlLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBUeXBlTm9kZSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0eXBlLCBzYW5pdGl6ZSh7IG9wdGlvbmFsLCB0ZXh0IH0pKVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVOb2RlIHtcbiAgaW50ZXJzZWN0PzogSW50ZXJzZWN0VHlwZU5vZGUsXG4gIHVuaW9uPzogVW5pb25UeXBlTm9kZSxcbiAgbGFtYmRhPzogTGFtYmRhVHlwZU5vZGUsXG4gIHR1cGxlPzogVHVwbGVUeXBlTm9kZSxcbiAgcHJpbWFyeT86IFByaW1hcnlUeXBlTm9kZSxcbiAgcGFyZW50aGVzaXplZD86IFBhcmVudGhlc2l6ZWRUeXBlTm9kZSxcbiAgdW5hcnk/OiBVbmFyeVR5cGVOb2RlLFxuICBvYmplY3Q/OiBPYmplY3RUeXBlTm9kZSxcbiAgYXJyYXk/OiBBcnJheVR5cGVOb2RlLFxuICBwcm9wZXJ0eT86IFByb3BlcnR5SWRlbnRpZmllck5vZGUsXG4gIG9wdGlvbmFsOiBib29sZWFuLFxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBJbnRlcnNlY3Rpb25UeXBlIG5vZGUuXG4gKiBcbiAqICMgQVBJXG4gKiBcbiAqIGBgYFxuICogQHB1YmxpYyBsZWZ0OiBUeXBlTm9kZSAtIFRoZSB0eXBlIG9mIG5vZGUgdGhhdCBhcHBlYXJzIG9uIHRoZSBsZWZ0LWhhbmQgc2lkZS5cbiAqIEBwdWJsaWMgcmlnaHQ6IFR5cGVOb2RlIC0gVGhlIHR5cGUgb2Ygbm9kZSB0aGF0IGFwcGVhcnMgb24gdGhlIHJpZ2h0LWhhbmQgc2lkZS5cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW50ZXJzZWN0VHlwZU5vZGUoXG4gIGxlZnQ6IFR5cGVOb2RlLFxuICByaWdodDogVHlwZU5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IEludGVyc2VjdFR5cGVOb2RlIHtcbiAgcmV0dXJuIHsgaW50ZXJzZWN0OiBzYW5pdGl6ZSh7IGxlZnQsIHJpZ2h0LCB0ZXh0IH0pIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcnNlY3RUeXBlTm9kZSB7XG4gIGludGVyc2VjdDoge1xuICAgIGxlZnQ6IFR5cGVOb2RlLFxuICAgIHJpZ2h0OiBUeXBlTm9kZSxcbiAgICB0ZXh0Pzogc3RyaW5nXG4gIH1cbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYW4gVW5pb25UeXBlIG5vZGUuXG4gKiBcbiAqICMgQVBJXG4gKiBcbiAqIGBgYFxuICogQGV4cG9ydFxuICogQHB1YmxpYyBsZWZ0OiBUeXBlTm9kZSAtIFRoZSB0eXBlIG9mIG5vZGUgdGhhdCBhcHBlYXJzIG9uIHRoZSBsZWZ0LWhhbmQgc2lkZS5cbiAqIEBwdWJsaWMgcmlnaHQ6IFR5cGVOb2RlIC0gVGhlIHR5cGUgb2Ygbm9kZSB0aGF0IGFwcGVhcnMgb24gdGhlIHJpZ2h0LWhhbmQgc2lkZS5cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlTm9kZShcbiAgbGVmdDogVHlwZU5vZGUsXG4gIHJpZ2h0OiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogVW5pb25UeXBlTm9kZSB7XG4gIHJldHVybiB7IHVuaW9uOiBzYW5pdGl6ZSh7IGxlZnQsIHJpZ2h0LCB0ZXh0IH0pIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbmlvblR5cGVOb2RlIHtcbiAgdW5pb246IHtcbiAgICBsZWZ0OiBUeXBlTm9kZSxcbiAgICByaWdodDogVHlwZU5vZGUsXG4gICAgdGV4dD86IHN0cmluZ1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIExhbWJkYVR5cGUgbm9kZS5cbiAqIFxuICogIyBBUElcbiAqIFxuICogYGBgXG4gKiAtIFRoZSBzaW5nbGUgcGFyYW1ldGVyIGluIGEgbGFtYmRhIHR5cGUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyczogRm9ybWFsUGFyYW1ldGVyU2VxdWVuY2NlIHwgdW5kZWZpbmVkW10gfCBudWxsXG4gKiAtIFRoZSBzZXF1ZW5jZSBvZiBwYXJhbWV0ZXJzIGluIGEgbGFtYmRhIHR5cGUuXG4gKiBAcGFyYW0gdHlwZTogVHlwZU5vZGVcbiAqIC0gVGhlIHJldHVybiB0eXBlIGluIGEgbGFtYmRhIHR5cGUuXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxhbWJkYVR5cGVOb2RlKFxuICBwYXJhbWV0ZXJzOiBGb3JtYWxQYXJhbWV0ZXJTZXF1ZW5jZU5vZGUgfCB1bmRlZmluZWRbXSxcbiAgdHlwZTogVHlwZU5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IExhbWJkYVR5cGVOb2RlIHtcbiAgaWYgKCFwYXJhbWV0ZXJzKSBwYXJhbWV0ZXJzID0gW11cbiAgcmV0dXJuIHsgbGFtYmRhOiBzYW5pdGl6ZSh7IHBhcmFtZXRlcnMsIHR5cGUsIHRleHQgfSkgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExhbWJkYVR5cGVOb2RlIHtcbiAgbGFtYmRhOiB7XG4gICAgcGFyYW1ldGVyczogRm9ybWFsUGFyYW1ldGVyU2VxdWVuY2VOb2RlIHwgdW5kZWZpbmVkW10sXG4gICAgdHlwZTogVHlwZU5vZGUsXG4gICAgdGV4dD86IHN0cmluZ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtYWxQYXJlbWV0ZXJTZXF1ZW5jZU5vZGUoXG4gIHBhcmFtZXRlcnM6IFBhcmFtZXRlck5vZGVbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBGb3JtYWxQYXJhbWV0ZXJTZXF1ZW5jZU5vZGUge1xuICByZXR1cm4geyBwYXJhbWV0ZXJzLCB0ZXh0IH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb3JtYWxQYXJhbWV0ZXJTZXF1ZW5jZU5vZGUge1xuICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJOb2RlW10gfCB1bmRlZmluZWRbXSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGFyYW1ldGVyTm9kZShcbiAgaWRlbnRpZmllcjogSWRlbnRpZmllck5vZGUsXG4gIHR5cGU/OiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogUGFyYW1ldGVyTm9kZSB7XG4gIHJldHVybiBzYW5pdGl6ZSh7IGlkZW50aWZpZXIsIHR5cGUsIHRleHQgfSlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJhbWV0ZXJOb2RlIHtcbiAgaWRlbnRpZmllcjogSWRlbnRpZmllck5vZGUsXG4gIHR5cGU/OiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHVwbGVUeXBlTm9kZShcbiAgaWRlbnRpZmllcjogSWRlbnRpZmllck5vZGUsXG4gIHR5cGVzOiBUeXBlTm9kZVtdIHwgdW5kZWZpbmVkW10sXG4gIHRleHQ/OiBzdHJpbmdcbik6IFR1cGxlVHlwZU5vZGUge1xuICByZXR1cm4gc2FuaXRpemUoeyBpZGVudGlmaWVyLCB0eXBlcywgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR1cGxlVHlwZU5vZGUge1xuICBpZGVudGlmaWVyPzogSWRlbnRpZmllck5vZGUsXG4gIHR5cGVzOiBUeXBlTm9kZVtdIHwgdW5kZWZpbmVkW10sXG4gIHRleHQ/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByaW1hcnlUeXBlTm9kZShcbiAgcHJpbWFyeTogT3B0aW9uYWxJZGVudGlmaWVyTm9kZSB8IChJZGVudGlmaWVyTm9kZSB8IEtleXdvcmROb2RlKSxcbiAgdGV4dD86IHN0cmluZ1xuKTogUHJpbWFyeVR5cGVOb2RlIHtcbiAgcmV0dXJuIHNhbml0aXplKHsgcHJpbWFyeSwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByaW1hcnlUeXBlTm9kZSB7XG4gIHByaW1hcnk6IE9wdGlvbmFsSWRlbnRpZmllck5vZGUgfCAoSWRlbnRpZmllck5vZGUgfCBLZXl3b3JkTm9kZSksXG4gIHRleHQ/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtleXdvcmROb2RlKFxuICB0ZXh0OiBzdHJpbmcgfCBcIm51bGxcIiB8IFwidW5kZWZpbmVkXCJcbik6IEtleXdvcmROb2RlIHtcbiAgcmV0dXJuIHsga2V5d29yZDogeyB0ZXh0IH0gfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtleXdvcmROb2RlIHtcbiAga2V5d29yZDoge1xuICAgIHRleHQ/OiBzdHJpbmdcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGFyZW50aGVzaXplZFR5cGVOb2RlKFxuICB0eXBlOiBUeXBlTm9kZSxcbiAgb3B0aW9uYWwgPSBmYWxzZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogUGFyZW50aGVzaXplZFR5cGVOb2RlIHtcbiAgcmV0dXJuIHsgcGFyZW50aGVzaXplZDogc2FuaXRpemUoeyB0eXBlLCBvcHRpb25hbCwgdGV4dCB9KSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcmVudGhlc2l6ZWRUeXBlTm9kZSB7XG4gIHBhcmVudGhlc2l6ZWQ6IHtcbiAgICB0eXBlOiBUeXBlTm9kZSxcbiAgICB0ZXh0Pzogc3RyaW5nXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlUeXBlTm9kZShcbiAgb3BlcmF0b3I6IHN0cmluZyB8IFwiJlwiIHwgXCIqXCIsXG4gIHJpZ2h0OiBQcmltYXJ5VHlwZU5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IFVuYXJ5VHlwZU5vZGUge1xuICByZXR1cm4geyB1bmFyeTogc2FuaXRpemUoeyBvcGVyYXRvciwgcmlnaHQsIHRleHQgfSkgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuYXJ5VHlwZU5vZGUge1xuICB1bmFyeToge1xuICAgIG9wZXJhdG9yOiBzdHJpbmcgfCBcIiZcIiB8IFwiKlwiLFxuICAgIHJpZ2h0OiBQcmltYXJ5VHlwZU5vZGUsXG4gICAgdGV4dD86IHN0cmluZ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYmplY3RUeXBlTm9kZShcbiAgb2JqZWN0PzogT2JqZWN0UGFpclR5cGVOb2RlW10gfCB1bmRlZmluZWRbXSxcbiAgdGV4dD86IHN0cmluZ1xuKTogT2JqZWN0VHlwZU5vZGUge1xuICBpZiAoIW9iamVjdCkgb2JqZWN0ID0gW107XG4gIHJldHVybiBzYW5pdGl6ZSh7IG9iamVjdCwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdFR5cGVOb2RlIHtcbiAgb2JqZWN0OiBPYmplY3RQYWlyVHlwZU5vZGVbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYmplY3RQYWlyVHlwZU5vZGUoXG4gIGtleTogVHlwZU5vZGUsXG4gIHZhbHVlOiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogT2JqZWN0UGFpclR5cGVOb2RlIHtcbiAgcmV0dXJuIHNhbml0aXplKHsga2V5LCB2YWx1ZSwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdFBhaXJUeXBlTm9kZSB7XG4gIGtleTogVHlwZU5vZGUsXG4gIHZhbHVlOiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXJyYXlUeXBlTm9kZShcbiAgdHlwZTogVHlwZU5vZGUsXG4gIHR5cGVzOiBUeXBlTm9kZVtdIHwgdW5kZWZpbmVkW10sXG4gIHRleHQ/OiBzdHJpbmdcbik6IEFycmF5VHlwZU5vZGUge1xuICBpZiAoIXR5cGVzKSB0eXBlcyA9IFtdO1xuXG4gIHJldHVybiB7IGFycmF5OiBzYW5pdGl6ZSh7IHR5cGUsIHR5cGVzLCB0ZXh0IH0pIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcnJheVR5cGVOb2RlIHtcbiAgYXJyYXk6IHtcbiAgICB0eXBlPzogVHlwZU5vZGUsXG4gICAgdHlwZXM/OiBUeXBlTm9kZVtdIHwgdW5kZWZpbmVkW10sXG4gICAgdGV4dD86IHN0cmluZ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9wZXJ0eUlkZW50aWZpZXJOb2RlKFxuICBwcm9wZXJ0eTogSWRlbnRpZmllck5vZGVbXSB8IHVuZGVmaW5lZFtdLFxuICB0ZXh0OiBzdHJpbmdcbik6IFByb3BlcnR5SWRlbnRpZmllck5vZGUge1xuICByZXR1cm4gY3JlYXRlSWRlbnRpZmllck5vZGUodGV4dCwgZmFsc2UsIHByb3BlcnR5KVxufTtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eUlkZW50aWZpZXJOb2RlIGV4dGVuZHMgSWRlbnRpZmllck5vZGUgeyB9XG5cblxuLyogRXhwcmVzc2lvbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHByZXNzaW9uTm9kZShcbiAgZXhwcmVzc2lvbjpcbiAgICBVbmFyeUV4cHJlc3Npb25Ob2RlXG4gICAgfCBCaW5hcnlFeHByZXNzaW9uTm9kZVxuICAgIHwgQXJyYXlFeHByZXNzaW9uTm9kZVxuICAgIHwgT2JqZWN0RXhwcmVzc2lvbk5vZGVcbiAgICB8IExhbWJkYUV4cHJlc3Npb25Ob2RlXG4gICAgfCBMaXRlcmFsRXhwcmVzc2lvbk5vZGVcbiAgICB8IFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uTm9kZSxcbiAgdGV4dD86IHN0cmluZyxcbik6IEV4cHJlc3Npb25Ob2RlIHtcbiAgcmV0dXJuIHNhbml0aXplKHsgZXhwcmVzc2lvbiwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25Ob2RlIHtcbiAgZXhwcmVzc2lvbjpcbiAgVW5hcnlFeHByZXNzaW9uTm9kZVxuICB8IEJpbmFyeUV4cHJlc3Npb25Ob2RlXG4gIHwgQXJyYXlFeHByZXNzaW9uTm9kZVxuICB8IE9iamVjdEV4cHJlc3Npb25Ob2RlXG4gIHwgTGFtYmRhRXhwcmVzc2lvbk5vZGVcbiAgfCBMaXRlcmFsRXhwcmVzc2lvbk5vZGVcbiAgfCBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbk5vZGVcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeUV4cHJlc3Npb25Ob2RlKFxuICBvcGVyYXRvcjogc3RyaW5nIHwgJysnIHwgJy0nLFxuICByaWdodDogRXhwcmVzc2lvbk5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IFVuYXJ5RXhwcmVzc2lvbk5vZGUge1xuICByZXR1cm4geyB1bmFyeTogc2FuaXRpemUoeyBvcGVyYXRvciwgcmlnaHQsIHRleHQgfSkgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuYXJ5RXhwcmVzc2lvbk5vZGUge1xuICB1bmFyeToge1xuICAgIG9wZXJhdG9yOiBzdHJpbmcgfCAnKycgfCAnLScsXG4gICAgcmlnaHQ6IEV4cHJlc3Npb25Ob2RlLFxuICAgIHRleHQ/OiBzdHJpbmdcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluYXJ5RXhwcmVzc2lvbk5vZGUoXG4gIG9wZXJhdG9yOiBzdHJpbmcgfCAnKycgfCAnLScsXG4gIGxlZnQ6IEV4cHJlc3Npb25Ob2RlLFxuICByaWdodDogRXhwcmVzc2lvbk5vZGUsXG4gIHRleHQ/OiBzdHJpbmdcbik6IEJpbmFyeUV4cHJlc3Npb25Ob2RlIHtcbiAgcmV0dXJuIHsgYmluYXJ5OiBzYW5pdGl6ZSh7IGxlZnQsIHJpZ2h0LCBvcGVyYXRvciwgdGV4dCB9KSB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluYXJ5RXhwcmVzc2lvbk5vZGUge1xuICBiaW5hcnk6IHtcbiAgICBsZWZ0OiBFeHByZXNzaW9uTm9kZSxcbiAgICByaWdodDogRXhwcmVzc2lvbk5vZGUsXG4gICAgb3BlcmF0b3I6IHN0cmluZyB8ICcrJyB8ICctJyB8ICcqJyB8ICcvJyxcbiAgICB0ZXh0Pzogc3RyaW5nXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFycmF5RXhwcmVzc2lvbk5vZGUoXG4gIGFycmF5PzogRXhwcmVzc2lvbk5vZGVbXSxcbiAgdGV4dD86IHN0cmluZ1xuKTogQXJyYXlFeHByZXNzaW9uTm9kZSB7XG4gIGlmICghYXJyYXkpIGFycmF5ID0gW107XG4gIHJldHVybiBzYW5pdGl6ZSh7IGFycmF5LCB0ZXh0IH0pXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlFeHByZXNzaW9uTm9kZSB7XG4gIGFycmF5OiBFeHByZXNzaW9uTm9kZVtdLFxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYmplY3RFeHByZXNzaW9uTm9kZShcbiAgb2JqZWN0PzogT2JqZWN0UGFpckV4cHJlc3Npb25Ob2RlW10sXG4gIHRleHQ/OiBzdHJpbmdcbik6IE9iamVjdEV4cHJlc3Npb25Ob2RlIHtcbiAgaWYgKCFvYmplY3QpIG9iamVjdCA9IFtdXG4gIHJldHVybiBzYW5pdGl6ZSh7IG9iamVjdCwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdEV4cHJlc3Npb25Ob2RlIHtcbiAgb2JqZWN0OiBPYmplY3RQYWlyRXhwcmVzc2lvbk5vZGVbXSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JqZWN0UGFpckV4cHJlc3Npb25Ob2RlKFxuICBrZXk6IExpdGVyYWxFeHByZXNzaW9uTm9kZSxcbiAgdmFsdWU6IE9iamVjdEV4cHJlc3Npb25Ob2RlIHwgTGl0ZXJhbEV4cHJlc3Npb25Ob2RlLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBPYmplY3RQYWlyRXhwcmVzc2lvbk5vZGUge1xuICByZXR1cm4gc2FuaXRpemUoeyBrZXksIHZhbHVlLCB0ZXh0IH0pXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0UGFpckV4cHJlc3Npb25Ob2RlIHtcbiAga2V5OiBMaXRlcmFsRXhwcmVzc2lvbk5vZGUsXG4gIHZhbHVlOiBPYmplY3RFeHByZXNzaW9uTm9kZSB8IExpdGVyYWxFeHByZXNzaW9uTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGFtYmRhRXhwcmVzc2lvbk5vZGUoXG4gIHBhcmFtZXRlcnM6IEZvcm1hbFBhcmFtZXRlclNlcXVlbmNlTm9kZSB8IHVuZGVmaW5lZFtdLFxuICB0eXBlOiBUeXBlTm9kZSxcbiAgdGV4dD86IHN0cmluZ1xuKTogTGFtYmRhRXhwcmVzc2lvbk5vZGUge1xuICBpZiAoIXBhcmFtZXRlcnMpIHBhcmFtZXRlcnMgPSBbXVxuICByZXR1cm4gY3JlYXRlTGFtYmRhVHlwZU5vZGUocGFyYW1ldGVycywgdHlwZSwgdGV4dClcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYW1iZGFFeHByZXNzaW9uTm9kZSBleHRlbmRzIExhbWJkYVR5cGVOb2RlIHsgfVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGFyZW50aGVzaXplZEV4cHJlc3Npb25lTm9kZShcbiAgZXhwcmVzc2lvbjogRXhwcmVzc2lvbk5vZGUsXG4gIG9wdGlvbmFsID0gZmFsc2UsXG4gIHRleHQ/OiBzdHJpbmdcbik6IFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uTm9kZSB7XG4gIHJldHVybiB7IHBhcmVudGhlc2l6ZWQ6IHNhbml0aXplKHsgZXhwcmVzc2lvbiwgb3B0aW9uYWwsIHRleHQgfSkgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGFyZW50aGVzaXplZEV4cHJlc3Npb25Ob2RlIHsgXG4gIHBhcmVudGhlc2l6ZWQ6IHtcbiAgICBleHByZXNzaW9uOiBFeHByZXNzaW9uTm9kZSxcbiAgICBvcHRpb25hbDogYm9vbGVhbixcbiAgICB0ZXh0Pzogc3RyaW5nXG4gIH1cbn07XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpdGVyYWxFeHByZXNzaW9uTm9kZShcbiAgdHlwZTogc3RyaW5nLFxuICB0ZXh0OiBzdHJpbmdcbik6IExpdGVyYWxFeHByZXNzaW9uTm9kZSB7XG4gIHJldHVybiB7IGxpdGVyYWw6IHNhbml0aXplKHsgdHlwZSwgdGV4dCB9KSB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGl0ZXJhbEV4cHJlc3Npb25Ob2RlIHtcbiAgbGl0ZXJhbDoge1xuICAgIHR5cGU6IHN0cmluZyxcbiAgICB0ZXh0Pzogc3RyaW5nLFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZXNjcmlwdGlvbk5vZGUoXG4gIHRleHQ6IHN0cmluZyxcbiAgaW5saW5lcz86IElubGluZVRhZ05vZGVbXVxuKTogRGVzY3JpcHRpb25Ob2RlIHtcbiAgaWYgKCFpbmxpbmVzKSBpbmxpbmVzID0gW11cbiAgcmV0dXJuIHsgZGVzY3JpcHRpb246IHNhbml0aXplKHsgdGV4dCwgaW5saW5lcyB9KSB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpcHRpb25Ob2RlIHtcbiAgZGVzY3JpcHRpb246IHtcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICAgaW5saW5lcz86IElubGluZVRhZ05vZGVbXVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbmxpbmVUYWdOb2RlKFxuICBpZGVudGlmaWVyOiBJZGVudGlmaWVyTm9kZSxcbiAgYm9keTogc3RyaW5nLFxuICB0ZXh0Pzogc3RyaW5nXG4pOiBJbmxpbmVUYWdOb2RlIHtcbiAgcmV0dXJuIHNhbml0aXplKHsgaWRlbnRpZmllciwgYm9keSwgdGV4dCB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZVRhZ05vZGUge1xuICBpZGVudGlmaWVyOiBJZGVudGlmaWVyTm9kZSxcbiAgYm9keTogc3RyaW5nLFxuICB0ZXh0Pzogc3RyaW5nXG59Il19