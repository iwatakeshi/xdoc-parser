"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
/* Documentation */
/**
 * Removes undefined, null, and false properties from an object.
 *
 * # API
 *
 * ```
 * @param object
 * ```
 */
function sanitize(object) {
    // Object.keys(object).forEach((key) => (object[key] == null) && delete object[key]);
    return _.pickBy(object);
}
/**
 *
 * Merges multiple objects into a single object
 *
 * # API
 *
 * ```
 * @function join
 * @param to: object - The target object.
 * @param from: object[] - The objects to merge.
 * ```
 */
function join(to, ...from) {
    return from.reduce(function (b, a) {
        for (var key in a)
            b[key] = a[key];
        return b;
    }, to);
}
/**
 * Creates a Documentation node.
 *
 * # API
 *
 * ```
 * @param body: BodyNode - The body node. See. {@link XDocASTNode.ts::BodyNode}
 * @param text?: string - The string representation of the body node.
 * @return DocumentationNode - See {@link XDocASTNode.ts::DocumentationNode}.
 * ```
 */
function createDocumentationNode(body, text) {
    return { documentation: join(sanitize({ body }), body.text ? { text: body.text } : {}) };
}
exports.createDocumentationNode = createDocumentationNode;
/**
 * Creates a Body node.
 */
function createBodyNode(annotations, text) {
    return join(sanitize({ annotations }), text ? { text } : {});
}
exports.createBodyNode = createBodyNode;
/* Tag */
function createTagNode(name, identifier, type, expression, description, text) {
    const object = Object.assign({}, name, identifier, type, expression, description);
    return join(sanitize(object), text ? { text } : {});
}
exports.createTagNode = createTagNode;
function createTagNameNode(name, text) {
    return join(sanitize({ name }), text ? { text } : {});
}
exports.createTagNameNode = createTagNameNode;
function createTagIdentifierNode(identifier, property, text) {
    let node = {};
    if (identifier)
        Object.assign(node, { identifier });
    else if (property)
        Object.assign(node, { property });
    return join(sanitize(node), text ? { text } : {});
}
exports.createTagIdentifierNode = createTagIdentifierNode;
function createOptionalTagIdentifierNode(identifier) {
    return identifier;
}
exports.createOptionalTagIdentifierNode = createOptionalTagIdentifierNode;
function createPropertyTagIdentifierNode(property, text) {
    return join(sanitize({ property }), text ? { text } : {});
}
exports.createPropertyTagIdentifierNode = createPropertyTagIdentifierNode;
function createIdentifierNode(text, optional = false, property) {
    if (!optional)
        optional = false;
    if (!property)
        property = [];
    return { identifier: join(sanitize({ optional, property }), text ? { text } : {}) };
}
exports.createIdentifierNode = createIdentifierNode;
function createOptionalIdentifierNode(optional = true, property, text) {
    return createIdentifierNode(text, optional, property);
}
exports.createOptionalIdentifierNode = createOptionalIdentifierNode;
/* Type */
/**
 *
 * Creates a Type node.
 *
 * # API
 *
 * ```
 * @export
 * @function createTypeNode
 * @param type: UnionTypeNode
 * | LambdaTypeNode
 * | TupleTypeNode
 * | PrimaryTypeNode
 * | ParenthesizedTypeNode
 * | UnaryTypeNode
 * | ObjectTypeNode
 * | ArrayTypeNode
 * | PropertyTypeNode
 * - The type of node to create.
 * @param optional = false
 * - Determines whether the type of node is optional.
 * ```
 */
function createTypeNode(type, optional = false, text) {
    return join({ type }, sanitize({ optional }), text ? { text } : {});
}
exports.createTypeNode = createTypeNode;
/**
 * Creates an IntersectionType node.
 *
 * # API
 *
 * ```
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createIntersectTypeNode(left, right, text) {
    return { intersect: join(sanitize({ left, right }), text ? { text } : {}) };
}
exports.createIntersectTypeNode = createIntersectTypeNode;
/**
 * Creates an UnionType node.
 *
 * # API
 *
 * ```
 * @export
 * @public left: TypeNode - The type of node that appears on the left-hand side.
 * @public right: TypeNode - The type of node that appears on the right-hand side.
 * ```
 */
function createUnionTypeNode(left, right, text) {
    return { union: join(sanitize({ left, right }), text ? { text } : {}) };
}
exports.createUnionTypeNode = createUnionTypeNode;
/**
 * Creates a LambdaType node.
 *
 * # API
 *
 * ```
 * - The single parameter in a lambda type.
 * @param parameters: FormalParameterSequencce | undefined[] | null
 * - The sequence of parameters in a lambda type.
 * @param type: TypeNode
 * - The return type in a lambda type.
 * ```
 */
function createLambdaTypeNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return { lambda: join(sanitize({ parameters, type }), text ? { text } : {}) };
}
exports.createLambdaTypeNode = createLambdaTypeNode;
function createFormalParemeterSequenceNode(parameters, text) {
    return { parameters, text };
}
exports.createFormalParemeterSequenceNode = createFormalParemeterSequenceNode;
function createParameterNode(identifier, type, text) {
    return join(sanitize({ identifier, type }), text ? { text } : {});
}
exports.createParameterNode = createParameterNode;
function createTupleTypeNode(identifier, types, text) {
    return { tuple: join(sanitize({ identifier, types }), text ? { text } : {}) };
}
exports.createTupleTypeNode = createTupleTypeNode;
function createTupleExtendedTypeNode(type, heritage, text) {
    return join(sanitize({ type, heritage }), text ? { text } : {});
}
exports.createTupleExtendedTypeNode = createTupleExtendedTypeNode;
function createPrimaryTypeNode(primary, text) {
    return join(sanitize({ primary }), text ? { text } : {});
}
exports.createPrimaryTypeNode = createPrimaryTypeNode;
function createKeywordNode(text) {
    return { keyword: text ? { text } : {} };
}
exports.createKeywordNode = createKeywordNode;
function createParenthesizedTypeNode(type, optional = false, text) {
    return { parenthesized: join(sanitize({ type, optional }), text ? { text } : {}) };
}
exports.createParenthesizedTypeNode = createParenthesizedTypeNode;
function createUnaryTypeNode(operator, right, text) {
    return { unary: join(sanitize({ operator, right }), text ? { text } : {}) };
}
exports.createUnaryTypeNode = createUnaryTypeNode;
function createObjectTypeNode(object, text) {
    if (!object)
        object = [];
    return join(sanitize({ object }), text ? { text } : {});
}
exports.createObjectTypeNode = createObjectTypeNode;
function createObjectPairTypeNode(key, value, text) {
    return join(sanitize({ key, value }), text ? { text } : {});
}
exports.createObjectPairTypeNode = createObjectPairTypeNode;
function createArrayTypeNode(type, types, text) {
    if (!types)
        types = [];
    return { array: join(sanitize({ type, types }), text ? { text } : {}) };
}
exports.createArrayTypeNode = createArrayTypeNode;
function createPropertyIdentifierNode(property, text) {
    return createIdentifierNode(text, false, property);
}
exports.createPropertyIdentifierNode = createPropertyIdentifierNode;
;
/* Expression */
function createExpressionNode(expression, text) {
    return join(sanitize({ expression }), text ? { text } : {});
}
exports.createExpressionNode = createExpressionNode;
function createUnaryExpressionNode(operator, right, text) {
    return { unary: join(sanitize({ operator, right }), text ? { text } : {}) };
}
exports.createUnaryExpressionNode = createUnaryExpressionNode;
function createBinaryExpressionNode(operator, left, right, text) {
    return { binary: join(sanitize({ left, right, operator }), text ? { text } : {}) };
}
exports.createBinaryExpressionNode = createBinaryExpressionNode;
function createArrayExpressionNode(array, text) {
    if (!array)
        array = [];
    return join(sanitize({ array }), text ? { text } : {});
}
exports.createArrayExpressionNode = createArrayExpressionNode;
function createObjectExpressionNode(object, text) {
    if (!object)
        object = [];
    return join(sanitize({ object }), text ? { text } : {});
}
exports.createObjectExpressionNode = createObjectExpressionNode;
function createObjectPairExpressionNode(key, value, text) {
    return join(sanitize({ key, value }), text ? { text } : {});
}
exports.createObjectPairExpressionNode = createObjectPairExpressionNode;
function createLambdaExpressionNode(parameters, type, text) {
    if (!parameters)
        parameters = [];
    return createLambdaTypeNode(parameters, type, text);
}
exports.createLambdaExpressionNode = createLambdaExpressionNode;
function createParenthesizedExpressioneNode(expression, optional = false, text) {
    return { parenthesized: join(sanitize({ expression, optional }), text ? { text } : {}) };
}
exports.createParenthesizedExpressioneNode = createParenthesizedExpressioneNode;
;
function createLiteralExpressionNode(type, text) {
    return { literal: join(sanitize({ type }), text ? { text } : {}) };
}
exports.createLiteralExpressionNode = createLiteralExpressionNode;
function createDescriptionNode(text, inlines) {
    if (!inlines)
        inlines = [];
    return { description: join(sanitize({ inlines }), text ? { text } : {}) };
}
exports.createDescriptionNode = createDescriptionNode;
function createInlineTagNode(identifier, body, text) {
    return join(sanitize({ identifier, body }), text ? { text } : {});
}
exports.createInlineTagNode = createInlineTagNode;
//# sourceMappingURL=data:application/json;base64,