"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const remark = require("remark");
const XDocCommentParser_1 = require("./XDocCommentParser");
const XDocASTGenerator_1 = require("./XDocASTGenerator");
const XDocASTVisitor_1 = require("./XDocASTVisitor");
class XDocParser {
    constructor(source, options) {
        this.options = {
            comment: {
                type: 'DOUBLE_STAR_COMMENT'
            },
            markdown: {
                remark: {},
                headingDepth: 2
            },
            visitor: {}
        };
        /**
         * Parse a single comment.
         *
         * @return: {
         *  markdown: RemarkNode[],
         *  documentation: Partial<DocumentationNode>
         * }
         */
        this.parse = () => {
            const comment = (new XDocCommentParser_1.default(this.source))
                .parse()
                .filter(this.filter)[0];
            return {
                markdown: comment ? this.parseMarkdown(comment.text) : null,
                documentation: comment ? this.parseXDoc(comment.text) : null
            };
        };
        /**
         * Parse multiple comments within a file.
         */
        this.parseFile = () => {
            const comments = (new XDocCommentParser_1.default(this.source))
                .parse()
                .filter(this.filter);
            return comments.map(token => ({
                markdown: this.parseMarkdown(token.text),
                documentation: this.parseXDoc(token.text)
            }));
        };
        this.parseMarkdown = (source) => {
            let ast = remark()
                .data('settings', this.options.markdown.remark)
                .parse(source);
            ast.children = ast.children.map((node, index) => {
                if (node.type === 'heading') {
                    node.depth = this.options.markdown.headingDepth;
                }
                if (node.type === 'code') {
                    if (this.isAPI(ast.children[index - 1])) {
                        if (!node.lang)
                            node.lang = 'xdoc';
                        return node;
                    }
                }
                return node;
            });
            return ast;
        };
        this.isAPI = (node) => {
            return node && node.type === "heading" && node.children[0].value.toLowerCase() === "api";
        };
        this.parseXDoc = (source) => {
            const XDocRegex = /@(\w+)([^{[(\n]*)?([\{\[\(][\s\S]*[\}\]\)]([\s]*(=|-)>.*)?)?([\s]*-(.)*)?/gmi;
            const documentation = (new XDocASTGenerator_1.default(source.match(XDocRegex).join('\n'))).generate();
            return (new XDocASTVisitor_1.default(documentation, this.options.visitor)
                .visit());
        };
        this.filter = (token) => {
            return XDocCommentParser_1.TokenType[token.type] === this.options.comment.type;
        };
        this.source_ = source;
        Object.assign(this.options, options || {});
    }
    get source() {
        return this.source_;
    }
}
exports.default = XDocParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWERvY1BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9YRG9jUGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLDJEQUEwRTtBQUMxRSx5REFBa0Q7QUFDbEQscURBQXlFO0FBOEJ6RSxNQUFxQixVQUFVO0lBYTdCLFlBQVksTUFBYyxFQUFFLE9BQW9DO1FBWHhELFlBQU8sR0FBc0I7WUFDbkMsT0FBTyxFQUFFO2dCQUNQLElBQUksRUFBRSxxQkFBcUI7YUFDNUI7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsWUFBWSxFQUFFLENBQUM7YUFDaEI7WUFDRCxPQUFPLEVBQUUsRUFBRTtTQUNaLENBQUE7UUFXRDs7Ozs7OztXQU9HO1FBQ0gsVUFBSyxHQUFHLEdBQUcsRUFBRTtZQUNYLE1BQU0sT0FBTyxHQUFHLENBQUMsSUFBSSwyQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2pELEtBQUssRUFBRTtpQkFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0wsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUk7Z0JBQzFELGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJO2FBQzVELENBQUE7UUFDSCxDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDZixNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksMkJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNsRCxLQUFLLEVBQUU7aUJBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM1QixRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN4QyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQzFDLENBQUMsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxDQUFBO1FBRU8sa0JBQWEsR0FBRyxDQUFDLE1BQWMsRUFBYyxFQUFFO1lBQ3JELElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRTtpQkFDZixJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztpQkFDOUMsS0FBSyxDQUFDLE1BQU0sQ0FBZSxDQUFDO1lBQy9CLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzlDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7b0JBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO2lCQUNqRDtnQkFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO29CQUN4QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJOzRCQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO3dCQUNuQyxPQUFPLElBQUksQ0FBQztxQkFDYjtpQkFDRjtnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFBO1lBQ0YsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLENBQUE7UUFFTyxVQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN2QixPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUM7UUFDM0YsQ0FBQyxDQUFBO1FBRU8sY0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDckMsTUFBTSxTQUFTLEdBQUcsOEVBQThFLENBQUM7WUFDakcsTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFJLDBCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1RixPQUFPLENBQUMsSUFBSSx3QkFBYyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztpQkFDNUQsS0FBSyxFQUFFLENBQ1QsQ0FBQztRQUNKLENBQUMsQ0FBQTtRQUVPLFdBQU0sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQ2hDLE9BQU8sNkJBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzdELENBQUMsQ0FBQTtRQXhFQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztDQW1FRjtBQXZGRCw2QkF1RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByZW1hcmsgZnJvbSBcInJlbWFya1wiO1xuaW1wb3J0IFhEb2NDb21tZW50UGFyc2VyLCB7IFRva2VuLCBUb2tlblR5cGUgfSBmcm9tICcuL1hEb2NDb21tZW50UGFyc2VyJztcbmltcG9ydCBYRG9jQVNUR2VuZXJhdG9yIGZyb20gXCIuL1hEb2NBU1RHZW5lcmF0b3JcIjtcbmltcG9ydCBYRG9jQVNUVmlzaXRvciwgeyBYRG9jQVNUVmlzaXRvck9wdGlvbnMgfSBmcm9tIFwiLi9YRG9jQVNUVmlzaXRvclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFhEb2NQYXJzZXJPcHRpb25zIHtcbiAgY29tbWVudDoge1xuICAgIHR5cGU/OiAnU0lOR0xFX0hBU0hfQ09NTUVOVCdcbiAgICB8ICdTSU5HTEVfU1RBUl9DT01NRU5UJ1xuICAgIHwgJ0RPVUJMRV9TVEFSX0NPTU1FTlQnXG4gICAgfCAnRE9VQkxFX1NMQVNIX0NPTU1FTlQnXG4gICAgfCAnVFJJUExFX1NMQVNIX0NPTU1FTlQnXG4gICAgfCAnVFJJUExFX1FVT1RFX0NPTU1FTlQnXG4gIH1cbiAgbWFya2Rvd246IHtcbiAgICByZW1hcms/OiBhbnksXG4gICAgaGVhZGluZ0RlcHRoPzogbnVtYmVyXG4gIH1cbiAgdmlzaXRvcjogWERvY0FTVFZpc2l0b3JPcHRpb25zIHwgYW55XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVtYXJrTm9kZSB7XG4gIHR5cGU6IHN0cmluZyxcbiAgZGVwdGg/OiBudW1iZXIsXG4gIHZhbHVlPzogc3RyaW5nLFxuICBsYW5nPzogc3RyaW5nXG4gIGNoaWxkcmVuOiBSZW1hcmtOb2RlW10sXG4gIHBvc2l0aW9uOiB7XG4gICAgc3RhcnQ6IG51bWJlcixcbiAgICBlbmQ6IG51bWJlclxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhEb2NQYXJzZXIge1xuICBwcml2YXRlIHNvdXJjZV86IHN0cmluZztcbiAgcHJpdmF0ZSBvcHRpb25zOiBYRG9jUGFyc2VyT3B0aW9ucyA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICB0eXBlOiAnRE9VQkxFX1NUQVJfQ09NTUVOVCdcbiAgICB9LFxuICAgIG1hcmtkb3duOiB7XG4gICAgICByZW1hcms6IHt9LFxuICAgICAgaGVhZGluZ0RlcHRoOiAyXG4gICAgfSxcbiAgICB2aXNpdG9yOiB7fVxuICB9XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPFhEb2NQYXJzZXJPcHRpb25zPikge1xuICAgIHRoaXMuc291cmNlXyA9IHNvdXJjZTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNvdXJjZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZV87XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYSBzaW5nbGUgY29tbWVudC5cbiAgICogXG4gICAqIEByZXR1cm46IHtcbiAgICogIG1hcmtkb3duOiBSZW1hcmtOb2RlW10sXG4gICAqICBkb2N1bWVudGF0aW9uOiBQYXJ0aWFsPERvY3VtZW50YXRpb25Ob2RlPlxuICAgKiB9XG4gICAqL1xuICBwYXJzZSA9ICgpID0+IHtcbiAgICBjb25zdCBjb21tZW50ID0gKG5ldyBYRG9jQ29tbWVudFBhcnNlcih0aGlzLnNvdXJjZSkpXG4gICAgICAucGFyc2UoKVxuICAgICAgLmZpbHRlcih0aGlzLmZpbHRlcilbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcmtkb3duOiBjb21tZW50ID8gdGhpcy5wYXJzZU1hcmtkb3duKGNvbW1lbnQudGV4dCk6IG51bGwsXG4gICAgICBkb2N1bWVudGF0aW9uOiBjb21tZW50ID8gdGhpcy5wYXJzZVhEb2MoY29tbWVudC50ZXh0KTogbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBtdWx0aXBsZSBjb21tZW50cyB3aXRoaW4gYSBmaWxlLlxuICAgKi9cbiAgcGFyc2VGaWxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbW1lbnRzID0gKG5ldyBYRG9jQ29tbWVudFBhcnNlcih0aGlzLnNvdXJjZSkpXG4gICAgICAucGFyc2UoKVxuICAgICAgLmZpbHRlcih0aGlzLmZpbHRlcik7XG4gICAgcmV0dXJuIGNvbW1lbnRzLm1hcCh0b2tlbiA9PiAoe1xuICAgICAgbWFya2Rvd246IHRoaXMucGFyc2VNYXJrZG93bih0b2tlbi50ZXh0KSxcbiAgICAgIGRvY3VtZW50YXRpb246IHRoaXMucGFyc2VYRG9jKHRva2VuLnRleHQpXG4gICAgfSkpXG4gIH1cblxuICBwcml2YXRlIHBhcnNlTWFya2Rvd24gPSAoc291cmNlOiBzdHJpbmcpOiBSZW1hcmtOb2RlID0+IHtcbiAgICBsZXQgYXN0ID0gcmVtYXJrKClcbiAgICAgIC5kYXRhKCdzZXR0aW5ncycsIHRoaXMub3B0aW9ucy5tYXJrZG93bi5yZW1hcmspXG4gICAgICAucGFyc2Uoc291cmNlKSBhcyBSZW1hcmtOb2RlO1xuICAgIGFzdC5jaGlsZHJlbiA9IGFzdC5jaGlsZHJlbi5tYXAoKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSAnaGVhZGluZycpIHtcbiAgICAgICAgbm9kZS5kZXB0aCA9IHRoaXMub3B0aW9ucy5tYXJrZG93bi5oZWFkaW5nRGVwdGg7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS50eXBlID09PSAnY29kZScpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBUEkoYXN0LmNoaWxkcmVuW2luZGV4IC0gMV0pKSB7XG4gICAgICAgICAgaWYgKCFub2RlLmxhbmcpIG5vZGUubGFuZyA9ICd4ZG9jJztcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSlcbiAgICByZXR1cm4gYXN0O1xuICB9XG5cbiAgcHJpdmF0ZSBpc0FQSSA9IChub2RlKSA9PiB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS50eXBlID09PSBcImhlYWRpbmdcIiAmJiBub2RlLmNoaWxkcmVuWzBdLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiYXBpXCI7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlWERvYyA9IChzb3VyY2U6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IFhEb2NSZWdleCA9IC9AKFxcdyspKFtee1soXFxuXSopPyhbXFx7XFxbXFwoXVtcXHNcXFNdKltcXH1cXF1cXCldKFtcXHNdKig9fC0pPi4qKT8pPyhbXFxzXSotKC4pKik/L2dtaTtcbiAgICBjb25zdCBkb2N1bWVudGF0aW9uID0gKG5ldyBYRG9jQVNUR2VuZXJhdG9yKHNvdXJjZS5tYXRjaChYRG9jUmVnZXgpLmpvaW4oJ1xcbicpKSkuZ2VuZXJhdGUoKTtcbiAgICByZXR1cm4gKG5ldyBYRG9jQVNUVmlzaXRvcihkb2N1bWVudGF0aW9uLCB0aGlzLm9wdGlvbnMudmlzaXRvcilcbiAgICAgIC52aXNpdCgpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyID0gKHRva2VuOiBUb2tlbikgPT4ge1xuICAgIHJldHVybiBUb2tlblR5cGVbdG9rZW4udHlwZV0gPT09IHRoaXMub3B0aW9ucy5jb21tZW50LnR5cGU7XG4gIH1cbn0iXX0=