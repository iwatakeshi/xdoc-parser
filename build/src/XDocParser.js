"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const remark = require("remark");
const XDocCommentParser_1 = require("./XDocCommentParser");
const XDocASTGenerator_1 = require("./XDocASTGenerator");
const XDocASTVisitor_1 = require("./XDocASTVisitor");
class XDocParser {
    constructor(source, options) {
        this.options = {
            comment: {
                type: 'DOUBLE_STAR_COMMENT'
            },
            markdown: {
                remark: {},
                headingDepth: 2
            },
            visitor: {}
        };
        /**
         * Parse a single comment.
         *
         * @return: {
         *  markdown: RemarkNode[],
         *  documentation: Partial<DocumentationNode>
         * }
         */
        this.parse = () => {
            const comment = (new XDocCommentParser_1.default(this.source))
                .parse()
                .filter(this.filter)[0];
            return {
                markdown: comment ? this.parseMarkdown(comment.text) : null,
                documentation: comment ? this.parseXDoc(comment.text) : null
            };
        };
        /**
         * Parse multiple comments within a file.
         */
        this.parseFile = () => {
            const comments = (new XDocCommentParser_1.default(this.source))
                .parse()
                .filter(this.filter);
            return comments.map(token => ({
                markdown: this.parseMarkdown(token.text),
                documentation: this.parseXDoc(token.text)
            }));
        };
        this.parseSyntax = () => {
            return this.parseXDoc(this.source);
        };
        this.parseMarkdown = (source) => {
            let ast = remark()
                .data('settings', this.options.markdown.remark)
                .parse(source);
            ast.children = ast.children.map((node, index) => {
                if (node.type === 'heading') {
                    node.depth = this.options.markdown.headingDepth;
                }
                if (node.type === 'code') {
                    if (this.isAPI(ast.children[index - 1])) {
                        if (!node.lang)
                            node.lang = 'xdoc';
                        return node;
                    }
                }
                return node;
            });
            return ast;
        };
        this.isAPI = (node) => {
            return node && node.type === "heading" && node.children[0].value.toLowerCase() === "api";
        };
        this.parseXDoc = (source) => {
            const XDocRegex = /@(\w+)([^{[(\n]*)?([\{\[\(][\s\S]*[\}\]\)]([\s]*(=|-)>.*)?)?([\s]*-(.)*)?/gmi;
            const syntaxes = source.match(XDocRegex) || [''];
            const documentation = (new XDocASTGenerator_1.default(syntaxes.join('\n'))).generate();
            return (new XDocASTVisitor_1.default(documentation, this.options.visitor)
                .visit());
        };
        this.filter = (token) => {
            return XDocCommentParser_1.TokenType[token.type] === this.options.comment.type;
        };
        this.source_ = source;
        Object.assign(this.options, options || {});
    }
    get source() {
        return this.source_;
    }
}
exports.default = XDocParser;
//# sourceMappingURL=data:application/json;base64,