"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TokenType;
(function (TokenType) {
    // EOF,
    TokenType[TokenType["SINGLE_HASH_COMMENT"] = 0] = "SINGLE_HASH_COMMENT";
    TokenType[TokenType["SINGLE_STAR_COMMENT"] = 1] = "SINGLE_STAR_COMMENT";
    TokenType[TokenType["DOUBLE_STAR_COMMENT"] = 2] = "DOUBLE_STAR_COMMENT";
    TokenType[TokenType["DOUBLE_SLASH_COMMENT"] = 3] = "DOUBLE_SLASH_COMMENT";
    TokenType[TokenType["TRIPLE_SLASH_COMMENT"] = 4] = "TRIPLE_SLASH_COMMENT";
    TokenType[TokenType["TRIPLE_QUOTE_COMMENT"] = 5] = "TRIPLE_QUOTE_COMMENT";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
/**
 * Token is a class that tokenizes words and adds
 * useful information such as line and column number.
 *
 * # API
 *
 * ```
 * @class Token
 * @constructor (
 *  type: TokenType,
 *  text: string,
 *  line: number,
 *  column: number,
 *  position: number
 * ) => Token
 * ```
 */
class Token {
    constructor(type, text, line, column, position) {
        this.name_ = TokenType[type];
        this.type_ = type;
        this.text_ = text;
        this.line_ = line;
        this.column_ = column;
        this.position_ = position;
    }
    get name() {
        return this.name_;
    }
    get type() {
        return this.type_;
    }
    get text() {
        return this.text_;
    }
    get line() {
        return this.line_;
    }
    get column() {
        return this.column_;
    }
    get position() {
        return this.position_;
    }
    static getTokenName(type) {
        return TokenType[type];
    }
    static getTokenType(type) {
        return TokenType[type];
    }
}
exports.Token = Token;
/**
 * XDocCommentParser is a class that parses
 * c-style comments and python-style comments.
 *
 * # API
 *
 * ```
 * @constructor (source: string) => XDocCommentParser
 * ```
 *
 * # Remark
 * The parser can also parse double-star comments.
 *
 */
class XDocCommentParser {
    constructor(source) {
        this.tokens = [];
        this.position = this.start = 0;
        this.source = source.replace(/\r\n/g, '\n');
        this.line = 1;
        this.column = 1;
    }
    parse() {
        while (!this.isAtEnd()) {
            this.start = this.position;
            this.scan();
        }
        return this.tokens;
    }
    scan() {
        const ch = this.advance();
        switch (ch) {
            case '/':
                if (this.match('*')) {
                    let isDoubleStartComment = false;
                    if (this.match('*')) {
                        // Substring starts from here
                        this.start = this.position;
                        isDoubleStartComment = true;
                    }
                    else
                        this.start = this.position;
                    while ((this.peek() + this.peek(1)) !== '*/' && !this.isAtEnd())
                        this.advance();
                    this.addToken(isDoubleStartComment ? TokenType.DOUBLE_STAR_COMMENT : TokenType.SINGLE_STAR_COMMENT);
                    // consume '*/'
                    this.advance(2);
                }
                else if (this.match('/')) {
                    if (this.match('/')) {
                        // Substring starts from here
                        this.start = this.position;
                        while (this.peek() !== '\n' && !this.isAtEnd())
                            this.advance();
                        this.addToken(TokenType.TRIPLE_SLASH_COMMENT);
                        break;
                    }
                    // Substring starts from here
                    this.start = this.position;
                    while (this.peek() !== '\n' && !this.isAtEnd())
                        this.advance();
                    this.addToken(TokenType.DOUBLE_SLASH_COMMENT);
                }
                break;
            case '"':
                // Python-style multi-line comment
                if (this.peek() + this.peek(1) === '""') {
                    // consume '"""'
                    this.advance(2);
                    // Substring starts from here
                    this.start = this.position;
                    while (this.peek() + this.peek(1) + this.peek(2) !== '"""' && !this.isAtEnd())
                        this.advance();
                    this.addToken(TokenType.TRIPLE_QUOTE_COMMENT);
                    // consume '"""'
                    this.advance(3);
                }
                break;
            // Python/Bash-style single comment
            case '#':
                // Substring starts from here
                this.start = this.position;
                while (this.peek() !== '\n' && !this.isAtEnd())
                    this.advance();
                this.addToken(TokenType.SINGLE_HASH_COMMENT);
                this.advance();
                break;
        }
    }
    addToken(type) {
        let text = this.source.substring(this.start, this.position);
        // Process the dobule star comment
        if (type === TokenType.DOUBLE_STAR_COMMENT) {
            text = text.split('\n')
                .map(line => {
                // Replace the first '*' 
                let lineArray = line.replace(/[*]/, '').split('');
                if (lineArray[0] === ' ') {
                    lineArray.shift();
                    if (lineArray[0] === ' ') {
                        lineArray.shift();
                    }
                }
                return lineArray.join('');
            }).join('\n');
        }
        this.tokens.push(new Token(type, text, this.line, this.column, this.position));
    }
    peek(to = 0) {
        if (this.isAtEnd())
            return this.EOF;
        if (to > 0) {
            if (to + this.position > this.source.length)
                return this.EOF;
            return this.source.charAt(this.position + to);
        }
        return this.source.charAt(this.position);
    }
    advance(by = 0) {
        do {
            this.position++;
            if (this.peek() === '\n') {
                this.line++;
                this.column = 1;
            }
            else
                this.column++;
            if (this.isAtEnd())
                return this.EOF;
        } while (((by--) - 1) > 0);
        return this.source.charAt(this.position - 1);
    }
    match(expected) {
        if (this.isAtEnd())
            return false;
        if (this.source.charAt(this.position) !== expected)
            return false;
        this.position++;
        return true;
    }
    isAtEnd() {
        return this.position >= this.source.length;
    }
    get EOF() {
        return '\0';
    }
}
exports.default = XDocCommentParser;
//# sourceMappingURL=data:application/json;base64,