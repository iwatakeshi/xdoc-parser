import { ATN } from 'antlr4ts/atn/ATN';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
export declare class XDocSyntaxLexer extends Lexer {
    static readonly NumberLiteral: number;
    static readonly IntegerLiteral: number;
    static readonly FloatingPointLiteral: number;
    static readonly BooleanLiteral: number;
    static readonly CharacterLiteral: number;
    static readonly StringLiteral: number;
    static readonly NullLiteral: number;
    static readonly EXTENDS: number;
    static readonly ID: number;
    static readonly NEWLINE: number;
    static readonly SPACE: number;
    static readonly TEXT_CONTENT: number;
    static readonly AT: number;
    static readonly PLUS: number;
    static readonly MINUS: number;
    static readonly STAR: number;
    static readonly FORWARD_SLASH: number;
    static readonly COLON: number;
    static readonly PERIOD: number;
    static readonly COMMA: number;
    static readonly EQUAL: number;
    static readonly QUESTION: number;
    static readonly AMP: number;
    static readonly PIPE: number;
    static readonly ARROW: number;
    static readonly EXCLAMATION: number;
    static readonly INLINE_TAG_START: number;
    static readonly BRACE_OPEN: number;
    static readonly BRACE_CLOSE: number;
    static readonly PAREN_OPEN: number;
    static readonly PAREN_CLOSE: number;
    static readonly BRACKET_OPEN: number;
    static readonly BRACKET_CLOSE: number;
    static readonly LESSTHAN: number;
    static readonly GREATERTHAN: number;
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    constructor(input: CharStream);
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    readonly modeNames: string[];
    action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void;
    private ID_action;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
